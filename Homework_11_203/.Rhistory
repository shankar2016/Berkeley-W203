library(ggplot2)
# Chose number of samples to be 1001. An odd number helps read the meadian vector easie
NBS <- 1001
# Set the confidence interval at plus/minus 95% (or 0.05 total outside the confidence interval),
# split evenly across two tails i.e. 0.025 at each tail
LOW_CI <- 0.05/2
HIGH_CI <- 1 - LOW_CI
# FUNCTION: bootstrap_median()
# Inputs: Number of iterations, NBS and  the parent sample
# Iteration processing to extract many bootstrap samples
bootstrap_median <- function (iteration, parent_sample) {
# Take a child sample from the parent sample, with replacement.
# Child sample has the same length as the parent sample
child_sample <- sample(parent_sample, size = length(parent_sample), replace = TRUE)
# Calculate the median of the new sample
child_median <- median(child_sample)
# return the calculated mean
return(list(iteration, child_median))
}
# Main bootstrap processing function
#   1. Takes a parent sample (from one of Random Normal, Chi Square, Binomial)
#   2. Takes the number of bootstrap iteraions (NBS)
#   3. Iterates over each sample and extracts a median
#   4. Returns a collection of bootstrapped medians and CI interval
median_bootstrap <- function(parent_sample, NBS) {
#With deterimining the median, 2 parameters are returned, the iteration number and the median
# Extract the median by accesing the second item ("[[2]]") in the returned list
median_distribution <- sapply(1:NBS, bootstrap_median, parent_sample = parent_sample)[[2]]
# Sort the medians from high to low
median_distribution <- sort(median_distribution)
# compute the 95% confidence interval
low_CI <- median_distribution[round(NBS * LOW_CI)]
high_CI <- median_distribution[round(NBS * HIGH_CI)]
# Function returns the median distribution and confidence intervals
return(list(median_distribution, c(low_CI, high_CI)))
}
# Test the median bootstrap using 3 kinds of data distributions
# 1. Random Normal
# 2. Poisson
# 3. Chi Square
# Plot results for each
test_code <- function() {
# Random Normal Distribution
parent_sample <- rnorm(n=100, mean=0, sd =1)
# y <- dnorm(parent_sample)
# plot(parent_sample,y)
results <- median_bootstrap(parent_sample, NBS)
browser()
distribution_hist(results, "Random Normal Distribution")
# Poisson Distribution
parent_sample <- rpois(300, 4)
# y <- dnorm(parent_sample)
# plot(parent_sample,y)
results <- median_bootstrap(parent_sample, NBS)
distribution_hist(results, "Poisson Distribution")
# Chi Square Distribution
parent_sample <- rchisq(300, df=7)
# y <- dnorm(parent_sample)
# plot(parent_sample,y)
results <- median_bootstrap(parent_sample, NBS)
distribution_hist(results, "Chi Square Distribution")
}
# Use one common plot routine that can be used by the test code.
# Customize the header strings so that each plat is distinguished by title
distribution_hist <- function (results, type = "") {
resultsDF <- data.frame(results[[1]])
myPlot <- ggplot(resultsDF, aes(results[[1]]))
myPlot <- myPlot + geom_histogram(binwidth=0.02)
#myPlot <- myPlot + geom_point() + geom_smooth()
myPlot <- myPlot +
ggtitle(paste ("Median Distribution (Samples from \n", type, ")", "\nRed and Blue lines show 95% confidence boundaries")) +
labs(x="Median Value", y="Frequency") +
geom_vline(xintercept = results[[3]][1], color = "red") + geom_vline(xintercept= results[[3]][2], color="blue")
plot(myPlot)
}
test_code()
str(results)
# Natarajan Shankar
# W 203: Supplement Exercie 4
# July 20th
# Problem 1: BOOTSTRAPPING
#
# Play it safe and set a seed value to get repeatable results
set.seed(314156)
# Pull in needed libraries
library(ggplot2)
# Chose number of samples to be 1001. An odd number helps read the meadian vector easie
NBS <- 1001
# Set the confidence interval at plus/minus 95% (or 0.05 total outside the confidence interval),
# split evenly across two tails i.e. 0.025 at each tail
LOW_CI <- 0.05/2
HIGH_CI <- 1 - LOW_CI
# FUNCTION: bootstrap_median()
# Inputs: Number of iterations, NBS and  the parent sample
# Iteration processing to extract many bootstrap samples
bootstrap_median <- function (iteration, parent_sample) {
# Take a child sample from the parent sample, with replacement.
# Child sample has the same length as the parent sample
child_sample <- sample(parent_sample, size = length(parent_sample), replace = TRUE)
# Calculate the median of the new sample
child_median <- median(child_sample)
browser()
# return the calculated mean
return(list(iteration, child_median))
}
# Main bootstrap processing function
#   1. Takes a parent sample (from one of Random Normal, Chi Square, Binomial)
#   2. Takes the number of bootstrap iteraions (NBS)
#   3. Iterates over each sample and extracts a median
#   4. Returns a collection of bootstrapped medians and CI interval
median_bootstrap <- function(parent_sample, NBS) {
#With deterimining the median, 2 parameters are returned, the iteration number and the median
# Extract the median by accesing the second item ("[[2]]") in the returned list
median_distribution <- sapply(1:NBS, bootstrap_median, parent_sample = parent_sample)[[2]]
# Sort the medians from high to low
median_distribution <- sort(median_distribution)
# compute the 95% confidence interval
low_CI <- median_distribution[round(NBS * LOW_CI)]
high_CI <- median_distribution[round(NBS * HIGH_CI)]
# Function returns the median distribution and confidence intervals
return(list(median_distribution, c(low_CI, high_CI)))
}
# Test the median bootstrap using 3 kinds of data distributions
# 1. Random Normal
# 2. Poisson
# 3. Chi Square
# Plot results for each
test_code <- function() {
# Random Normal Distribution
parent_sample <- rnorm(n=100, mean=0, sd =1)
# y <- dnorm(parent_sample)
# plot(parent_sample,y)
results <- median_bootstrap(parent_sample, NBS)
browser()
distribution_hist(results, "Random Normal Distribution")
# Poisson Distribution
parent_sample <- rpois(300, 4)
# y <- dnorm(parent_sample)
# plot(parent_sample,y)
results <- median_bootstrap(parent_sample, NBS)
distribution_hist(results, "Poisson Distribution")
# Chi Square Distribution
parent_sample <- rchisq(300, df=7)
# y <- dnorm(parent_sample)
# plot(parent_sample,y)
results <- median_bootstrap(parent_sample, NBS)
distribution_hist(results, "Chi Square Distribution")
}
# Use one common plot routine that can be used by the test code.
# Customize the header strings so that each plat is distinguished by title
distribution_hist <- function (results, type = "") {
resultsDF <- data.frame(results[[1]])
myPlot <- ggplot(resultsDF, aes(results[[1]]))
myPlot <- myPlot + geom_histogram(binwidth=0.02)
#myPlot <- myPlot + geom_point() + geom_smooth()
myPlot <- myPlot +
ggtitle(paste ("Median Distribution (Samples from \n", type, ")", "\nRed and Blue lines show 95% confidence boundaries")) +
labs(x="Median Value", y="Frequency") +
geom_vline(xintercept = results[[3]][1], color = "red") + geom_vline(xintercept= results[[3]][2], color="blue")
plot(myPlot)
}
test_code()
child_median
iteration
list(iteration, child_median)
iteration
# W 203: Supplement Exercie 4
# July 20th
# Problem 1: BOOTSTRAPPING
#
# Play it safe and set a seed value to get repeatable results
set.seed(314156)
# Pull in needed libraries
library(ggplot2)
# Chose number of samples to be 1001. An odd number helps read the meadian vector easie
NBS <- 1001
# Set the confidence interval at plus/minus 95% (or 0.05 total outside the confidence interval),
# split evenly across two tails i.e. 0.025 at each tail
LOW_CI <- 0.05/2
HIGH_CI <- 1 - LOW_CI
# FUNCTION: bootstrap_median()
# Inputs: Number of iterations, NBS and  the parent sample
# Iteration processing to extract many bootstrap samples
bootstrap_median <- function (iteration, parent_sample) {
# Take a child sample from the parent sample, with replacement.
# Child sample has the same length as the parent sample
child_sample <- sample(parent_sample, size = length(parent_sample), replace = TRUE)
# Calculate the median of the new sample
child_median <- median(child_sample)
# return the calculated mean
return(list(iteration, child_median))
}
# Main bootstrap processing function
#   1. Takes a parent sample (from one of Random Normal, Chi Square, Binomial)
#   2. Takes the number of bootstrap iteraions (NBS)
#   3. Iterates over each sample and extracts a median
#   4. Returns a collection of bootstrapped medians and CI interval
median_bootstrap <- function(parent_sample, NBS) {
#With deterimining the median, 2 parameters are returned, the iteration number and the median
# Extract the median by accesing the second item ("[[2]]") in the returned list
median_distribution <- sapply(1:NBS, bootstrap_median, parent_sample = parent_sample)
browser()
# Sort the medians from high to low
median_distribution <- sort(median_distribution)[[2]]
# compute the 95% confidence interval
low_CI <- median_distribution[round(NBS * LOW_CI)]
high_CI <- median_distribution[round(NBS * HIGH_CI)]
# Function returns the median distribution and confidence intervals
return(list(median_distribution, c(low_CI, high_CI)))
}
# Test the median bootstrap using 3 kinds of data distributions
# 1. Random Normal
# 2. Poisson
# 3. Chi Square
# Plot results for each
test_code <- function() {
# Random Normal Distribution
parent_sample <- rnorm(n=100, mean=0, sd =1)
# y <- dnorm(parent_sample)
# plot(parent_sample,y)
results <- median_bootstrap(parent_sample, NBS)
browser()
distribution_hist(results, "Random Normal Distribution")
# Poisson Distribution
parent_sample <- rpois(300, 4)
# y <- dnorm(parent_sample)
# plot(parent_sample,y)
results <- median_bootstrap(parent_sample, NBS)
distribution_hist(results, "Poisson Distribution")
# Chi Square Distribution
parent_sample <- rchisq(300, df=7)
# y <- dnorm(parent_sample)
# plot(parent_sample,y)
results <- median_bootstrap(parent_sample, NBS)
distribution_hist(results, "Chi Square Distribution")
}
# Use one common plot routine that can be used by the test code.
# Customize the header strings so that each plat is distinguished by title
distribution_hist <- function (results, type = "") {
resultsDF <- data.frame(results[[1]])
myPlot <- ggplot(resultsDF, aes(results[[1]]))
myPlot <- myPlot + geom_histogram(binwidth=0.02)
#myPlot <- myPlot + geom_point() + geom_smooth()
myPlot <- myPlot +
ggtitle(paste ("Median Distribution (Samples from \n", type, ")", "\nRed and Blue lines show 95% confidence boundaries")) +
labs(x="Median Value", y="Frequency") +
geom_vline(xintercept = results[[3]][1], color = "red") + geom_vline(xintercept= results[[3]][2], color="blue")
plot(myPlot)
}
test_code()
head(median_distribution)
median_distribution[[1]]
median_distribution[[1]][1]
median_distribution[[1]][2]
median_distribution[[2]]
median_distribution[[2]][1]
median_distribution[[2]][2]
median_distribution[[2]]
str(median_distribution)
class(median_distribution)
median_distribution(,1)
median_distribution[,1]
median_distribution[,2]
median_distribution[1,]
median_distribution[2,]
median_distribution[2,][1]
median_distribution[2,][1001]
tail(median_distribution)
median_distribution[2,]
median(median_distribution[2,])
?ifesle
?ifelse
# Problem 2: OPTIMIZATION PROBLEM
#
# Function : isEmpty()
# Support routine to determine whether a vector is empty
# Used after cleaning up negative numbers fromm user input.
# If after cleanup of negative numbers, the vector is null, do not process further
isEmpty <- function(x) {
return(length(x)==0)
}
# Function: objf()
# Scaffolding Cost function for Optim
# Take 3 numbers, x, r, and k. Raise r to the power of k and compare with X
# Return square of the compare
objf <- function(r, numbers, k) {
cost = (numbers - (r^k)) ^2
return(cost)
}
# Function: rootk()
# Function to find the root k of a positive number using numerical optimization
# Accept a vecor of numbers, numbers
# Return root k for all the numbers in the vector
rootk <- function(numbers, k, start = NULL) {
if (!isEmpty(x <- numbers[numbers < 0])) {
cat("\nCaution 0001 :  negative numbers in vector, being removed... \n\n\n")
numbers <- numbers[numbers >= 0]
browser()
# Catch illegal k values
if (k < 0)
stop("\nERROR 001: Root request is invale, Processing stopped")
# Stop if no numbers to process after negative number cleanup
if(isEmpty(numbers))
stop("\nERROR 002: Input had negative numbers,
\ncleaned up number vector is empty!, Processing stopped")
}
# In case the user does not provide a starting approximation, start at 1
is.null(start)
start = 1
# User vector has positive numbers and has been sanitized
# apply Optim() to all members in the vector. Return a vecor of results
# Use method BGFS for optimized processing
roots <- sapply(numbers, function(i) {optim(par = i,
numbers = i, objf, k = k, method="BFGS")$par})
result <- list(numbers, roots)
# For pretty printing of final message
if (k ==1)
tag <- "st"
else if (k ==2)
tag <- "nd"
else if (k == 3)
tag <- "rd"
else
tag <- "th"
names(result) <- c("Processed Numbers", paste ("Corresponding",
paste(k, tag, sep =""), "Root for each processed number"))
return(result)
}
rootk(c(25, 125, 96), -3)
# Problem 2: OPTIMIZATION PROBLEM
#
# Function : isEmpty()
# Support routine to determine whether a vector is empty
# Used after cleaning up negative numbers fromm user input.
# If after cleanup of negative numbers, the vector is null, do not process further
isEmpty <- function(x) {
return(length(x)==0)
}
# Function: objf()
# Scaffolding Cost function for Optim
# Take 3 numbers, x, r, and k. Raise r to the power of k and compare with X
# Return square of the compare
objf <- function(r, numbers, k) {
cost = (numbers - (r^k)) ^2
return(cost)
}
# Function: rootk()
# Function to find the root k of a positive number using numerical optimization
# Accept a vecor of numbers, numbers
# Return root k for all the numbers in the vector
rootk <- function(numbers, k, start = NULL) {
if (!isEmpty(x <- numbers[numbers < 0])) {
cat("\nCaution 0001 :  negative numbers in vector, being removed... \n\n\n")
numbers <- numbers[numbers >= 0]
browser()
# Catch illegal k values
if (k < 0)
stop("\nERROR 001: Root request is invale, Processing stopped")
# Stop if no numbers to process after negative number cleanup
if(isEmpty(numbers))
stop("\nERROR 002: Input had negative numbers,
\ncleaned up number vector is empty!, Processing stopped")
}
# In case the user does not provide a starting approximation, start at 1
is.null(start)
start = 1
# User vector has positive numbers and has been sanitized
# apply Optim() to all members in the vector. Return a vecor of results
# Use method BGFS for optimized processing
roots <- sapply(numbers, function(i) {optim(par = i,
numbers = i, objf, k = k, method="BFGS")$par})
result <- list(numbers, roots)
# For pretty printing of final message
if (k ==1)
tag <- "st"
else if (k ==2)
tag <- "nd"
else if (k == 3)
tag <- "rd"
else
tag <- "th"
names(result) <- c("Processed Numbers", paste ("Corresponding",
paste(k, tag, sep =""), "Root for each processed number"))
return(result)
}
rootk(c(25, -125, 96), 3)
k
rootk(c(25, -125, 96), -3)
k
k < 0
rootk(c(25, -125, 96), -3)
k
# Problem 2: OPTIMIZATION PROBLEM
#
# Function : isEmpty()
# Support routine to determine whether a vector is empty
# Used after cleaning up negative numbers fromm user input.
# If after cleanup of negative numbers, the vector is null, do not process further
isEmpty <- function(x) {
return(length(x)==0)
}
# Function: objf()
# Scaffolding Cost function for Optim
# Take 3 numbers, x, r, and k. Raise r to the power of k and compare with X
# Return square of the compare
objf <- function(r, numbers, k) {
cost = (numbers - (r^k)) ^2
return(cost)
}
# Function: rootk()
# Function to find the root k of a positive number using numerical optimization
# Accept a vecor of numbers, numbers
# Return root k for all the numbers in the vector
rootk <- function(numbers, k, start = NULL) {
if (!isEmpty(x <- numbers[numbers < 0])) {
cat("\nCaution 0001 :  negative numbers in vector, being removed... \n\n\n")
numbers <- numbers[numbers >= 0]
# Catch illegal k values
if (k < 0) {
browser()
stop("\nERROR 001: Root request is invalid, Processing stopped")
}
# Stop if no numbers to process after negative number cleanup
if(isEmpty(numbers))
stop("\nERROR 002: Input had negative numbers,
\ncleaned up number vector is empty!, Processing stopped")
}
# In case the user does not provide a starting approximation, start at 1
is.null(start)
start = 1
# User vector has positive numbers and has been sanitized
# apply Optim() to all members in the vector. Return a vecor of results
# Use method BGFS for optimized processing
roots <- sapply(numbers, function(i) {optim(par = i,
numbers = i, objf, k = k, method="BFGS")$par})
result <- list(numbers, roots)
# For pretty printing of final message
if (k ==1)
tag <- "st"
else if (k ==2)
tag <- "nd"
else if (k == 3)
tag <- "rd"
else
tag <- "th"
names(result) <- c("Processed Numbers", paste ("Corresponding",
paste(k, tag, sep =""), "Root for each processed number"))
return(result)
}
rootk(c(25, -125, 96), -3)
# Problem 2: OPTIMIZATION PROBLEM
#
# Function : isEmpty()
# Support routine to determine whether a vector is empty
# Used after cleaning up negative numbers fromm user input.
# If after cleanup of negative numbers, the vector is null, do not process further
isEmpty <- function(x) {
return(length(x)==0)
}
# Function: objf()
# Scaffolding Cost function for Optim
# Take 3 numbers, x, r, and k. Raise r to the power of k and compare with X
# Return square of the compare
objf <- function(r, numbers, k) {
cost = (numbers - (r^k)) ^2
return(cost)
}
# Function: rootk()
# Function to find the root k of a positive number using numerical optimization
# Accept a vecor of numbers, numbers
# Return root k for all the numbers in the vector
rootk <- function(numbers, k, start = NULL) {
if (!isEmpty(x <- numbers[numbers < 0])) {
cat("\nCaution 0001 :  negative numbers in vector, being removed... \n\n\n")
numbers <- numbers[numbers >= 0]
# Catch illegal k values
if (k < 0) {
browser()
stop("\nERROR 001: Root request is invalid (below 0), Processing stopped")
}
# Stop if no numbers to process after negative number cleanup
if(isEmpty(numbers))
stop("\nERROR 002: Input had negative numbers,
\ncleaned up number vector is empty!, Processing stopped")
}
# In case the user does not provide a starting approximation, start at 1
is.null(start)
start = 1
# User vector has positive numbers and has been sanitized
# apply Optim() to all members in the vector. Return a vecor of results
# Use method BGFS for optimized processing
roots <- sapply(numbers, function(i) {optim(par = i,
numbers = i, objf, k = k, method="BFGS")$par})
result <- list(numbers, roots)
# For pretty printing of final message
if (k ==1)
tag <- "st"
else if (k ==2)
tag <- "nd"
else if (k == 3)
tag <- "rd"
else
tag <- "th"
names(result) <- c("Processed Numbers", paste ("Corresponding",
paste(k, tag, sep =""), "Root for each processed number"))
return(result)
}
rootk(8, 2)
rootk(4, 2)
rootk(4, 2, 3)
rootk(4, 2, 10)
?optim
