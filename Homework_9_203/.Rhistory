sqrt(188)
sqrt(124)
dataForMen <- GSS[GSS$sex == "Male",]
dataForMen
head(dataForMen)
junky <- na.exclude(dataForMen$sanitizedAgewed)
head(junky)
mean(junky$sanitizedAgewed)
mean(junky)
var(junky)
sd(junky)
min(junky)
max(junky)
nrow(junky)
count(junky)
summary(junky)
junkyw <- na.exclude(dataForWomen$sanitizedAgewed)
dataForWomen <- GSS[GSS$sex == "Female",]
junkyw <- na.exclude(dataForWomen$sanitizedAgewed)
mean(junky)
var(junky)
covar(junky, junkyw)
covariance(junky, junkyw)
GSS$testSanitizedAgewed <- GSS$agewed
GSS$testSanitizedAgewed[(GSS$agewed > GSS$age) | (GSS$agewed == 99)] <- NA
dataForMen <- GSS[GSS$sex == "Male",]
menVariance <- var(na.exclude(dataForMen$testSanitizedAgewed))
menVariance
dataForWomen <- GSS[GSS$sex == "Female",]
womenVariance <- var(na.exclude(dataForWomen$testSanitizedAgewed))
womenVariance
leveneResult <- leveneTest(na.exclude(GSS$sanitizedAgewed), na.exclude(GSS$sex))
leveneResult
ttypeof(leveneResult)
typeof(leveneResult)
leveneResult[[1]]
leveneResult[[2]]
leveneResult[[3]]
GSS$sexBackup[(GSS$agewed > GSS$age) | (GSS$agewed == 99)] <- NA
leveneResult <- leveneTest(na.exclude(GSS$testSanitizedAgewed), na.exclude(GSS$sexBackup))
leveneResult
length(GSS$testSanitizedAgewed)
length(GSS$sexBackup)
length(na.exclude(GSS$testSanitizedAgewed))
length(na.exclude(GSS$sexBackup))
GSS$sexBackup
GSS
GSS$agewed
colname(GSS)
colnames(GSS)
GSS$sexBackup
GSS$sex
GSS$sexBackup <- GSS$sex
GSS$sexBackup
GSS$sex[(GSS$agewed < 18) | (GSS$agewed > GSS$age) | (GSS$agewed == 99)] <- NA
GSS$sexBackup
length(na.exclude(GSS$sexBackup))
length(na.exclude(GSS$testSanitizedAgewed))
load("GSS.RData")
GSS$sanitizedAgewed <- GSS$agewed
GSS$sanitizedAgewed[(GSS$agewed < 18) | (GSS$agewed > GSS$age) | (GSS$agewed == 99)] <- NA
GSS$sanitizedAgewed
library("RPostgreSQL")
mydb = dbConnect(RPostgreSQL(postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap), uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL")
m <- dbDriver("PostgreSQL")
con <- dbConnect(m, user="lujelbkxszjega", password="NOOmGG6w8mWvg9WPI1PWBAh1QL", dbname="postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap")
con
dbListTables(con)
sqlTables(con)
?sqlTables
install.packages("RODBC", type='source')
library("RODBC")
sqlTables(con)
?odbcDriverConnect
odbcDriverConnect(postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap, uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL")
odbcDriverConnect("postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap"", uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL")
odbcDriverConnect("postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap", uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL")
conn < - odbcDriverConnect("Driver=SQL Server; Server=postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap; Database=test_DB; Uid="lujelbkxszjega"; Pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL";")
conn < - odbcDriverConnect("Driver=SQL Server; Server=postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap; Database=test_DB; Uid=lujelbkxszjega; Pwd=NOOmGG6w8mWvg9WPI1PWBAh1QL;")
conn <- odbcDriverConnect("Driver=SQL Server; Server=postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap; Database=test_DB; Uid=lujelbkxszjega; Pwd=NOOmGG6w8mWvg9WPI1PWBAh1QL;")
conn <- odbcDriverConnect("Server=postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap; Uid=lujelbkxszjega; Pwd=NOOmGG6w8mWvg9WPI1PWBAh1QL;")
conn <- odbcDriverConnect("Driver=mySQL;Server=postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap; Uid=lujelbkxszjega; Pwd=NOOmGG6w8mWvg9WPI1PWBAh1QL;")
conn <- odbcDriverConnect("Driver=SQL Server;Server=postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap; Uid=lujelbkxszjega; Pwd=NOOmGG6w8mWvg9WPI1PWBAh1QL;")
conn <- odbcDriverConnect("Driver=SQL;Server=postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap; Uid=lujelbkxszjega; Pwd=NOOmGG6w8mWvg9WPI1PWBAh1QL;")
conn <- odbcDriverConnect("Driver=postgres;Server=postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap; Uid=lujelbkxszjega; Pwd=NOOmGG6w8mWvg9WPI1PWBAh1QL;")
conn <- odbcDriverConnect("Driver=postgreSQL;Server=postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap; Uid=lujelbkxszjega; Pwd=NOOmGG6w8mWvg9WPI1PWBAh1QL;")
getwd()
insurgency = read.dta("blah\blah\Insurgency.dta")
insurgency = read.dta("lyall2010.dta")
?read.dta
install.packages("foreign")
install.packages("foreign")
library(foreign)
insurgency = read.dta("lyall2010.dta")
insurgency
head(insurgency)
typeof(dur)
typeof(insurgency$dur)
typeof(insurgency$wdl)
typeof(insurgency$pol2)
typeof(insurgency$occ)
cor(dur, wdl)
cor(insurgency$dur, insurgency$wdl)
cor(insurgency$dur, insurgency$pol2)
cor(insurgency$dur, insurgency$occ)
cor(insurgency$wdl, insurgency$pol2)
cor(insurgency$wdl, insurgency$occ)
cor(insurgency$pol2, insurgency$occ)
cor.test(insurgency$dur, insurgency$pol2)
cor.test(insurgency$dur, insurgency$wdl)
cor.test(insurgency$wdl, insurgency$occ)
cor.test(insurgency$pol2, insurgency$occ)
cor.test(insurgency$dur, insurgency$occ)
cor(insurgency[,c("dur", "wdl", "pol2", "occ")], use="pairwise.complete.obs")
cor(insurgency[,c("dur", "wdl", "pol2", "occ")], use="pairwise.complete.obs")**2
scatterplot(insurgency$dur, insurgency$wdl)
libray(cars)
library(cars)
install.packages("cars")
library(cars)
install.packages("car")
library(car)
scatterplot(insurgency$dur, insurgency$wdl)
scatterplot(insurgency$dur, insurgency$pol2)
scatterplot(insurgency$pol2, insurgency$occ)
scatterplot(insurgency$wdl, insurgency$occ)
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from cartable")
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from bookings")
df_postgres
head(df_postgres)
pairs(df_postgres)
?pairs
pairs(df_postgres[1:5])
pairs(df_postgres[1:4])
pairs(df_postgres[1:2])
scatterplot(df_postgres$parent_id, df_postgres$sitter_id,)
scatterplot(df_postgres$parent_id, df_postgres$sitter_id)
hist(df_postgres$parent_id, df_postgres$sitter_id)
hist(df_postgres$parent_id)
hist(df_postgres$parent_id, breaks=1000)
max(df_postgres$parent_id)
mode(df_postgres$parent_id)
summary(df_postgres$parent_id)
dbListTables(con)
# query the data from postgreSQL
df_postgres <- dbGetQuery(con, "SELECT * from transactions")
df_postgres
head(df_postgres)
tail(df_postgres)
colnames(df_postgres)
typeof(df_postgres)
typeof(df_postgres$parent_id
)
names(df_postgres)
typeof(names(df_postgres))
str(df_postgres)
?aggregate
aggregate(df_postgres$amount, by=c(df_postgres$parent_id), sum)
aggregate(df_postgres$amount, list(df_postgres$parent_id), sum)
df_postgres[df_postgres$id==2]
df_postgres[df_postgres$id==2,]
head(df_postgres)
tail(df_postgres)
df_postgres[df_postgres$parent_id==28]
df_postgres[df_postgres$parent_id==28,]
jj <- aggregate(df_postgres$amount, list(df_postgres$parent_id), sum)
head(jj)
jj
sum(df_postgres[df_postgres$parent_id==28,]$amount)
plot(jj)
colnames(jj) <- c("parent_id", "amount")
plot(jj$parent_id, jj$amount)
max(jj$amount)
jj[, max(jj$amount)]
jj[max(jj$amount),]
jj[jj$amount == max(jj$amount),]
?aggregate
jj <- aggregate(df_postgres$amount, list(df_postgres$parent_id), sum, colnames = c("parent_id", "amount"))
jj <- aggregate(df_postgres$amount, list(df_postgres$parent_id), sum, col = c("parent_id", "amount"))
jj <- aggregate(df_postgres$amount, list(df_postgres$parent_id), sum, cols = c("parent_id", "amount"))
jj <- aggregate(df_postgres$amount, list(df_postgres$parent_id), fun = "sum", col = c("parent_id", "amount"))
jj <- aggregate(df_postgres$amount, list(df_postgres$parent_id), FUN = "sum", col = c("parent_id", "amount"))
jj <- aggregate(df_postgres$amount, list(df_postgres$parent_id), sum, col = c("parent_id", "amount"))
jj <- aggregate(df_postgres$amount, list(df_postgres$parent_id), sum)
jj
jj <- aggregate(df_postgres, list(df_postgres$parent_id), sum)
jj <- aggregate(df_postgres$amount, list(df_postgres$parent_id), sum)
colnames(df_postgres)
jj <- aggregate(df_postgres, list(df_postgres$parent_id, df_postgres$created_at, df_postgres$updated_at), sum)
typeof(df_postgres$created_at)
jj <- aggregate(df_postgres, list(df_postgres$parent_id, as.date(df_postgres$created_at), as.date(df_postgres$updated_at), sum)
)
jj <- aggregate(df_postgres, list(df_postgres$parent_id, as.date(df_postgres$created_at), as.date(df_postgres$updated_at)), sum)
?as.date
jj <- aggregate(df_postgres, list(df_postgres$parent_id, as.Date(df_postgres$created_at), as.Date(df_postgres$updated_at)), sum)
jj <- aggregate(df_postgres, list(df_postgres$parent_id, as.Character(df_postgres$created_at), as.Character(df_postgres$updated_at)), sum)
jj <- aggregate(df_postgres, list(df_postgres$parent_id, as.character(df_postgres$created_at), as.character(df_postgres$updated_at)), sum)
jj <- aggregate(df_postgres, list(df_postgres$parent_id, as.character(df_postgres$created_at), as.character(df_postgres$updated_at)), FUN = "sum")
jj <- aggregate(df_postgres, list(df_postgres$parent_id, as.character(df_postgres$created_at), as.character(df_postgres$updated_at)), FUN = "mean")
warnings()
jj
head(jj)
jj[jj$parent_id==28,]
jj <- aggregate(df_postgres$amount ~ df_postgres$parent_id, FUN = sum)
jj
heda(jj)
head(jj)
jj[1:100]
jj[1:100,]
res <- sqlQuery(dbhandle, 'select * from information_schema.tables')
typeof(dbhandle)
typeof(con)
kk <-dbListTables(con)
typeof(kk)
kk
nrow(kk)
count(kk)
length(kk)
summary(innsurgency$wdl)
insurgency
sys(insurgency)
sy
insurgency$wdl
summary(insurgency$wdl)
Summary(insurgency$pol2)
Summary(insurgency$occ)
Summary(insurgency$pol2)
insurgency$pol2
insurgency$occ
jj
cumulativeParentRevenue < jj
cumulativeParentRevenue <- jj
?dbWriteTable
dbWriteTable(con, "Shankar test", cumulativeParentRevenue)
ll <- dbGetQuery(con, "SELECT * from Shankar test")
ll <- dbGetQuery(con, "SELECT * from Shankar")
dbListTables(con)
ll <- dbGetQuery(con, "SELECT * from Shankar test")
ll <- dbGetQuery(con, "SELECT * from Shankar_test")
ll <- dbGetQuery(con, "SELECT * from verifications")
ll
ll <- dbGetQuery(con, "SELECT * from 'Shankar test'")
ll <- dbGetQuery(con, "SELECT * from "Shankar test"")
ll <- dbGetQuery(con, "SELECT * from \"Shankar test\"")
ll
pp <- dbGetQuery(con, "SELECT * from \"Shankar test\"")
pp
pp <- dbGetQuery(con, "Delete * from \"Shankar test\"")
pp <- dbGetQuery(con, "DELETE  \"Shankar test\"")
pp <- dbGetQuery(con, "drop table  \"Shankar test\"")
pp
dbListTables(con)
library(RMySQL)
library("RPostgreSQL")
con <- dbConnect(m, user="lujelbkxszjega", password="NOOmGG6w8mWvg9WPI1PWBAh1QL", dbname="postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap")
con
m <- dbDriver("PostgreSQL")
con <- dbConnect(m, user="lujelbkxszjega", password="NOOmGG6w8mWvg9WPI1PWBAh1QL", dbname="postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap")
con
dbListTables
dbListTables(con)
library(RODBC)
dbhandle <- odbcDriverConnect('driver={SQL Server};server=mysqlhost;database=mydbname;trusted_connection=true')
df_postgres <- dbGetQuery(con, "SELECT * from bookings")
df_postgres
head(df_postgres)
ncol(df_postgres)
nrow(df_postgres)
typeof(df_postgres)
sys(df_postgres)
str(df_postgres)
as.time(df_postgres$start_time)
as.time
as.Date(df_postgres$start_time)
str(df_postgres)
library("RPostgreSQL")
# mydb = dbConnect(RPostgreSQL(postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap), uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL")
m <- dbDriver("PostgreSQL")
con <- dbConnect(m, user="lujelbkxszjega", password="NOOmGG6w8mWvg9WPI1PWBAh1QL", dbname="postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap")
con
jj <- aggregate(df_postgres$amount ~ df_postgres$parent_id, FUN = sum)
df_postgres <- dbGetQuery(con, "SELECT * from bookings")
cumulativeParentRevenue <- aggregate(df_postgres$amount ~ df_postgres$parent_id, FUN = sum)
head(df_postgres)
colnames(df_postgres)
library(cars)
df_postgres <- dbGetQuery(con, "SELECT * from bookings")
head(df_postgres)
zz <- df_postgres
zz[,parent_id==28]
zz
head(zz)
zz[,parent_id==23]
zz[parent_id==23]
zz[parent_id==23,]
zz[,zz$parent_id==23]
zz[zz$parent_id==23,]
xx <- zz[zz$parent_id==23,]
head(xx)
tail(xx)
aggregate(df_postgres$amount ~ df_postgres$parent_id, FUN = sum)
getwd()
setwd("../Homework_9_203")
getwd()
senateData <- read.csv("united_states_senate_2014", header=T)
senateData <- read.csv("united_states_senate_2014.csv", header=T)
senataData
senateData
head(senateData)
str(senateData)
?stat.desc
install.packages("pastecs")
library(pastecs)
?stat.desc
head(senateData)
fundingData <- data.frame(c(senateData$Senator.names, senateData$Campaign.Money.Raised..millions.of..., senateData$Campaign.Money.Spent..millions.of...))
fundingData
head(fundingData)
fundingData <- data.frame((senateData$Senator.names, senateData$Campaign.Money.Raised..millions.of..., senateData$Campaign.Money.Spent..millions.of...))
fundingData <- data.frame(senateData$Senator.names, senateData$Campaign.Money.Raised..millions.of..., senateData$Campaign.Money.Spent..millions.of...)
nrow(senateData)
nrow(Campaign.Money.Spent..millions.of...)
nrow(senateData$Campaign.Money.Spent..millions.of...)
colnames(senateData)
length(senateData$Campaign.Money.Spent..millions.of...)
length(Campaign.Money.Raised..millions.of...)
length(senateData$Campaign.Money.Raised..millions.of...)
senateData$Campaign.Money.Raised..millions.of... == NA
senateData$Campaign.Money.Raised..millions.of...
senateData$Campaign.Money.Spent..millions.of...
fundingData <- data.frame(senateData$Campaign.Money.Raised..millions.of..., senateData$Campaign.Money.Spent..millions.of...)
fundingData
length(senateData$names)
head(senateData)
length(senateData$Senator.Names)
dep.t.test(fundingData$Campaign.Money.Raised..millions.of..., fundingData$Campaign.Money.Spent..millions.of...)
install.packages("WRS")
library(WRS)
install.packages("psychi")
install.packages("rpsychi")
libray(rpsychi)
library(rpsychi)
dep.t.test(fundingData$Campaign.Money.Raised..millions.of..., fundingData$Campaign.Money.Spent..millions.of...)
dep.t.test(fundingData$Campaign.Money.Raised..millions.of..., fundingData$Campaign.Money.Spent..millions.of..., paired=TRUE)
dep.t.test<- t.test(fundingData$Campaign.Money.Raised..millions.of..., fundingData$Campaign.Money.Spent..millions.of..., paired=TRUE)
?t.test
fundingData$Campaign.Money.Raised..millions.of...
fundingData
fundingData$Campaign.Money.Raised..millions.of...
dep.t.test<- t.test(senateData.fundingData$Campaign.Money.Raised..millions.of..., senateData.fundingData$Campaign.Money.Spent..millions.of..., paired=TRUE)
dep.t.test<- t.test(fundingData$senateData.Campaign.Money.Raised..millions.of..., fundingData$senateData.Campaign.Money.Spent..millions.of..., paired=TRUE)
dep.t.test
head(senateData)
qqplot.raised <- qplot(fundingData$senateData.Campaign.Money.Raised..millions.of..., stat="qq")
install.packages("ggplot2")
library(ggplot2)
qqplot.raised <- qplot(fundingData$senateData.Campaign.Money.Raised..millions.of..., stat="qq")
qqplot.raised <- qplot(fundingData$senateData.Campaign.Money.Raised..millions.of...)
qqplot.raised
qqplot.raised <- qplot(fundingData$senateData.Campaign.Money.Raised..millions.of..., binwidth=100)
qqplot.raised
qqplot.raised <- qplot(fundingData$senateData.Campaign.Money.Raised..millions.of..., bins=100)
qqplot.raised
senateData$Campaign.Money.Raised..millions.of...
hist(fundingData$senateData.Campaign.Money.Raised..millions.of..., bins=100)
qnorm(na.exclude(fundingData$senateData.Campaign.Money.Raised..millions.of...), main = "Money raised by senators")
qnorm(fundingData$senateData.Campaign.Money.Raised..millions.of...)
qqnorm(fundingData$senateData.Campaign.Money.Raised..millions.of...)
qqnorm(fundingData$senateData.Campaign.Money.Spent..millions.of...)
dep.t.test<- t.test(fundingData$senateData.Campaign.Money.Spent..millions.of...,fundingData$senateData.Campaign.Money.Raised..millions.of..., paired = TRUE)
dep.t.test
femaleFundrainsing <- fundingData <- data.frame(senateData$gender == "Female")
femaleFundraising
femaleFundrainsing
fundingData
fundingData <- data.frame(senateData$Campaign.Money.Raised..millions.of..., senateData$Campaign.Money.Spent..millions.of...)
senatData$gender == "Female"
senateData$gender == "Female"
head(senateData)
senateData$Gender == "Female"
femaleFundrainsing <- data.frame(senateData$gender == "Female")
femaleFundraising
femaleFundrainsing
femaleFundrainsing <- data.frame(senateData$Gender == "Female")
femaleFundrainsing
femaleFundrainsing <- senateData[,senateData$Gender == "Female"]
femaleFundrainsing <- senateData[senateData$Gender == "Female",]
femaleFundraising
femaleFundrainsing
((femaleFundraising$Campaign.Money.Raised..millions.of...) & (femaleFundraising$Party == Republican))
femaleFundraising <- femaleFundrainsing
((femaleFundraising$Campaign.Money.Raised..millions.of...) & (femaleFundraising$Party == Republican))
((femaleFundraising$Campaign.Money.Raised..millions.of...) & (femaleFundraising$Party == "Republican"))
femaleFundraising[femaleFundraising$Party == "Republican"), )]
femaleFundraising[femaleFundraising$Party == "Republican"), ]
femaleFundraising[femaleFundraising$Party == "Republican", ]
femaleFundraising[femaleFundraising$Party == "Republican", ]$Campaign.Money.Raised..millions.of...
qqnorm(femaleFundraising[femaleFundraising$Party == "Republican", ]$Campaign.Money.Raised..millions.of...)
qqnorm(femaleFundraising[femaleFundraising$Party == "Democrat", ]$Campaign.Money.Raised..millions.of...)
qqnorm(fundingData$senateData.Campaign.Money.Raised..millions.of..., main = " oney raised by Senators")
qqnorm(fundingData$senateData.Campaign.Money.Spent..millions.of..., main = "Money spent by Senators")
ghhist(fundingData$senateData.Campaign.Money.Raised..millions.of...)
hist(fundingData$senateData.Campaign.Money.Raised..millions.of...)
hist(log(fundingData$senateData.Campaign.Money.Raised..millions.of...))
hist(1/(fundingData$senateData.Campaign.Money.Raised..millions.of...))
hist((fundingData$senateData.Campaign.Money.Raised..millions.of...))
#Isolate the data for female Senators
fdmR <- femaleFundraising[femaleFundraising$Party == "Democrat", ]$Campaign.Money.Raised..millions.of...
fRmR <- femaleFundraising[femaleFundraising$Party == "Republican", ]$Campaign.Money.Raised..millions.of...
qqnorm(fDmR)
fDmR <- femaleFundraising[femaleFundraising$Party == "Democrat", ]$Campaign.Money.Raised..millions.of...
fRmR <- femaleFundraising[femaleFundraising$Party == "Republican", ]$Campaign.Money.Raised..millions.of...
qqnorm(fDmR)
qqnorm(fRmR)
qqnorm(fRmR)
t.test(femaleFundraising[femaleFundraising$Party == "Republican", ]$Campaign.Money.Raised..millions.of..., )
fDmR
fRmR
t.test(Campaign.Money.Raised..millions.of... ~ Party, data = femaleFundraising, paired = FALSE)
nrow(femaleFundraising)
sMpS <- fundingData[fundingData$Religion == "Protestant", ]$Campaign.Money.Spent..millions.of...
sMnpS <- fundingData[fundingData$Religion != "Protestant", ]$Campaign.Money.Spent..millions.of...
sMpS
fundingData
senateData <- read.csv("united_states_senate_2014.csv", header=T)
senateData <- read.csv("united_states_senate_2014.csv", header=T)
senateData
sMpS <- senateData[senateData$Religion == "Protestant", ]$Campaign.Money.Spent..millions.of...
sMpS
sMpS <- senateData[senateData$Religion == "Protestant", ]
sMnpS <- senateData[senateData$Religion != "Protestant", ]
sMpS
sMnpS
sMnpS$Religion <- "Not Protestant"
sMnpS
newDF <- c(sMpS, sMnpS)
newDF
str(newDF'')
str(newDF)
newDF <- data.frame(c(sMpS, sMnpS))
newDF <- rbind(sMpS, sMnpS))
?rbind
ncol(sMpS)
ncol(sMnpS)
newDF <- rbind(sMpS, sMnpS)
newDF
t.test(Campaign.Money.Spent..millions.of... ~ Religion, data = newDF, paired = FALSE)
rm(list=ls())
library(postecs)
library(rpsychi)
library(ggplot2)
# read the data
senateData <- read.csv("united_states_senate_2014.csv", header=T)
# Dependent t test
# Null Hypothesis : Population difference in Amount of money raised and Amount of money spent is 0
# Alternate Hypothesis : Population difference in Amount of money raised and Amount of money spent is NOT 0
# Look at the Normality of the data
qqnorm(fundingData$senateData.Campaign.Money.Raised..millions.of..., main = "Money raised by Senators")
qqnorm(fundingData$senateData.Campaign.Money.Spent..millions.of..., main = "Money spent by Senators")
library(pastecs)
library(rpsychi)
library(ggplot2)
# read the data
senateData <- read.csv("united_states_senate_2014.csv", header=T)
# Dependent t test
# Null Hypothesis : Population difference in Amount of money raised and Amount of money spent is 0
# Alternate Hypothesis : Population difference in Amount of money raised and Amount of money spent is NOT 0
# Look at the Normality of the data
qqnorm(fundingData$senateData.Campaign.Money.Raised..millions.of..., main = "Money raised by Senators")
qqnorm(fundingData$senateData.Campaign.Money.Spent..millions.of..., main = "Money spent by Senators")
# Create a smaller data frame with just the funding data
fundingData <- data.frame(senateData$Campaign.Money.Raised..millions.of..., senateData$Campaign.Money.Spent..millions.of...)
# Dependent t test
# Null Hypothesis : Population difference in Amount of money raised and Amount of money spent is 0
# Alternate Hypothesis : Population difference in Amount of money raised and Amount of money spent is NOT 0
# Look at the Normality of the data
qqnorm(fundingData$senateData.Campaign.Money.Raised..millions.of..., main = "Money raised by Senators")
qqnorm(fundingData$senateData.Campaign.Money.Spent..millions.of..., main = "Money spent by Senators")
qqnorm(fundingData$senateData.Campaign.Money.Raised..millions.of..., main = "Money raised by Senators")
qqnorm(fundingData$senateData.Campaign.Money.Spent..millions.of..., main = "Money spent by Senators")
qqnorm(fundingData$senateData.Campaign.Money.Raised..millions.of..., main = "Money raised by Senators")
# Run the Dependent t-test, we are working with the same test group
dep.t.test<- t.test(fundingData$senateData.Campaign.Money.Raised..millions.of..., fundingData$senateData.Campaign.Money.Spent..millions.of..., paired=TRUE)
dep.t.test
# Female Fundraising
# NULL Hypothesis : No differenec in fundraising between Female Democrats and Female Republicans
# get the date on the female senators
femaleFundraising <- senateData[senateData$Gender == "Female",]
femaleFundraising
nrow(femaleFundraising)
#Isolate the data for female Senators
fDmR <- femaleFundraising[femaleFundraising$Party == "Democrat", ]$Campaign.Money.Raised..millions.of...
fRmR <- femaleFundraising[femaleFundraising$Party == "Republican", ]$Campaign.Money.Raised..millions.of...
# Check the normality of the data
qqnorm(fDmR)
qqnorm(fRmR)
#Part 3: Do protestant Senators spend more or less money than non-protestant senators?
# NULL Hypothesis: Protestant senators spend the same amount as non-protestant ministers
#Isolate the data for Protestent and non-Protestant Senators
spentMoneyProtestantSenators <- senateData[senateData$Religion == "Protestant", ]
spentMoneynonProtestantSenators <- senateData[senateData$Religion != "Protestant", ]
# Change all Non Protestents to "Non Protestant"
spentMoneynonProtestantSenators$Religion <- "Not Protestant"
# Cocatenate the two dataframes
newDF <- rbind(spentMoneyProtestantSenators, spentMoneynonProtestantSenators)
# run the independent t-test
t.test(Campaign.Money.Spent..millions.of... ~ Religion, data = newDF, paired = FALSE)
wilcox.test(Campaign.Money.Raised..millions.of... ~ Party, data = femaleFundraising, paired = FALSE)
wilcox.test(Campaign.Money.Spent..millions.of... ~ Religion, data = newDF, paired = FALSE)
qqnorm(fundingData$senateData.Campaign.Money.Raised..millions.of..., main = "Money raised by Senators")
