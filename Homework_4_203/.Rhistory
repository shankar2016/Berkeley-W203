inOrOut <- logical(n)
# Create a data frame to maintain all the data
circleDataFrame <- data.frame(circleDataX, circleDataY, inOrOut)
# Sort the coordinates as to whether they are inside or on the circle or whether they are outside
circleDataFrame$inOrOut <- ifelse(((circleDataFrame$circleDataX ^ 2) + (circleDataFrame$circleDataY ^ 2) <= 1), TRUE, FALSE)
# to make processing easier, subset the data frame into two
# one for points that lie inside or on the circle
# one for points that lie outside the circle
circleIn <- subset(circleDataFrame, circleDataFrame$inOrOut == TRUE)
circleOut <- subset(circleDataFrame, circleDataFrame$inOrOut == FALSE)
varianceEstimate <- ((nrow(circleIn)/nrow(circleDataFrame))*(1-(nrow(circleIn)/nrow(circleDataFrame))))
return(varianceEstimate)
}
variance.estimate(100)
variance.estimate(100)
variance.estimate(100)
variance.estimate(100)
variance.estimate(1000)
variance.estimate(1000)
variance.estimate(1000)
variance.estimate(10000)
variance.estimate(10000)
variance.estimate(100000)
variance.estimate(100000)
variance.estimate(100000)/16
.16/16
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate(10)
variance.estimate <- function (n=100) {
# Generate x anf y coordinates in the range -1 to 1
circleDataX <- runif(n, min=-1, max=1)
circleDataY <- runif(n, min=-1, max=1)
# add a flag to record whether a point is inside the circle (TRUE) or outside the circle (FALSE)
inOrOut <- logical(n)
# Create a data frame to maintain all the data
circleDataFrame <- data.frame(circleDataX, circleDataY, inOrOut)
# Sort the coordinates as to whether they are inside or on the circle or whether they are outside
circleDataFrame$inOrOut <- ifelse(((circleDataFrame$circleDataX ^ 2) + (circleDataFrame$circleDataY ^ 2) <= 1), TRUE, FALSE)
# to make processing easier, subset the data frame into two
# one for points that lie inside or on the circle
# one for points that lie outside the circle
circleIn <- subset(circleDataFrame, circleDataFrame$inOrOut == TRUE)
circleOut <- subset(circleDataFrame, circleDataFrame$inOrOut == FALSE)
varianceEstimate <- (((nrow(circleIn)/nrow(circleDataFrame))*(1-(nrow(circleIn)/nrow(circleDataFrame)))) * 1/16)
return(varianceEstimate)
}
variance.estimate(10)
variance.estimate(10)
sqrt(variance.estimate(10))
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
totalPoints <- integer(1000)
iterations <- 0
#
# Iterate 1000 times
#
while (iterations < 1000) {
# Vary the total number of plotted points randomly between 1000 and 10000
totalPoints[i] <- sample(1000:10000, 1)
# Compute the variance estimate
results[i] <- variance.estimate(totalPoints[i])
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
results
head(results)
varianceEstimate <- integer(1000)
totalPoints <- integer(1000)
iterations <- 0
varianceEstimate
totalPoints
#
# Iterate 1000 times
#
while (iterations < 10) {
# Vary the total number of plotted points randomly between 1000 and 10000
totalPoints[i] <- sample(1000:10000, 1)
# Compute the variance estimate
results[i] <- variance.estimate(totalPoints[i])
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
variance.estimate(10)
results
ls()
rm(results)
ls()
while (iterations < 10) {
# Vary the total number of plotted points randomly between 1000 and 10000
totalPoints[i] <- sample(1000:10000, 1)
# Compute the variance estimate
results[i] <- variance.estimate(totalPoints[i])
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
variance.estimate(10)
results
# We are asked to do a 1000 iterations
# Vary the total number of plotted points randomly between 1000 and 10000
# compute the variance using equation 2 above
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
totalPoints <- integer(1000)
iterations <- 0
#
# Iterate 1000 times
#
while (iterations < 10) {
# Vary the total number of plotted points randomly between 1000 and 10000
totalPoints[i] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[i] <- variance.estimate(totalPoints[i])
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
variance.estimate(10)
rm(varianceEstimate)
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
totalPoints <- integer(1000)
iterations <- 0
#
# Iterate 1000 times
#
while (iterations < 1000) {
# Vary the total number of plotted points randomly between 1000 and 10000
totalPoints[i] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[i] <- variance.estimate(totalPoints[i])
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
varianceEstimate
rm(varianceEstimate)
varianceEstimate
variance.estimate(10)
varianceEstimate
varianceEstimate <- integer(1000)
variance.estimate(10)
varianceEstimate
rm(varianceEstimate)
sample(1000:10000, 1)
sample(1000:10000, 1)
sample(1000:10000, 1)
sample(1000:10000, 1)
variance.estimate <- function (n=100) {
# Generate x anf y coordinates in the range -1 to 1
circleDataX <- runif(n, min=-1, max=1)
circleDataY <- runif(n, min=-1, max=1)
# add a flag to record whether a point is inside the circle (TRUE) or outside the circle (FALSE)
inOrOut <- logical(n)
# Create a data frame to maintain all the data
circleDataFrame <- data.frame(circleDataX, circleDataY, inOrOut)
# Sort the coordinates as to whether they are inside or on the circle or whether they are outside
circleDataFrame$inOrOut <- ifelse(((circleDataFrame$circleDataX ^ 2) + (circleDataFrame$circleDataY ^ 2) <= 1), TRUE, FALSE)
# to make processing easier, subset the data frame into two
# one for points that lie inside or on the circle
# one for points that lie outside the circle
circleIn <- subset(circleDataFrame, circleDataFrame$inOrOut == TRUE)
circleOut <- subset(circleDataFrame, circleDataFrame$inOrOut == FALSE)
# Compute the Varianec Estimate by computing C-i/C-total
varianceEstimate <- (((nrow(circleIn)/nrow(circleDataFrame))*(1-(nrow(circleIn)/nrow(circleDataFrame)))) * 1/16)
# Return the variance estimate
return(varianceEstimate)
}
# We are asked to do a 1000 iterations
# Vary the total number of plotted points randomly between 1000 and 10000
# compute the variance using equation 2 above
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
# With each of 1000 tests, the number of plotted points is going to be changed. Keep track of total.
totalPoints <- integer(1000)
# Loop 1000 times over the variance.estimate() function
# start with count of 0
iterations <- 0
#
# Main routine to collect 1000 variance estimates
#
while (iterations < 1000) {
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[i] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[i] <- variance.estimate(totalPoints[i])/totalPoints[i]
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
varianceEstimate
totalpoints
totalPoints
rm(totalPoints)
rm(varianceEstimate)
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
# With each of 1000 tests, the number of plotted points is going to be changed. Keep track of total.
totalPoints <- integer(1000)
# Loop 1000 times over the variance.estimate() function
# start with count of 0
iterations <- 0
#
# Main routine to collect 1000 variance estimates
#
while (iterations < 1000) {
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[i] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[i] <- variance.estimate(totalPoints[i])/totalPoints[i]
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
totalPoints
# We are asked to do a 1000 iterations
# Vary the total number of plotted points randomly between 1000 and 10000
# compute the variance using equation 2 above
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
# With each of 1000 tests, the number of plotted points is going to be changed. Keep track of total.
totalPoints <- integer(1000)
# Loop 1000 times over the variance.estimate() function
# start with count of 0
iterations <- 0
#
# Main routine to collect 1000 variance estimates
#
while (iterations < 1000) {
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[iterations] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[iterations] <- variance.estimate(totalPoints[iterations])/totalPoints[iterations]
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
variance.estimate <- function (n=100) {
# Generate x anf y coordinates in the range -1 to 1
circleDataX <- runif(n, min=-1, max=1)
circleDataY <- runif(n, min=-1, max=1)
# add a flag to record whether a point is inside the circle (TRUE) or outside the circle (FALSE)
inOrOut <- logical(n)
# Create a data frame to maintain all the data
circleDataFrame <- data.frame(circleDataX, circleDataY, inOrOut)
# Sort the coordinates as to whether they are inside or on the circle or whether they are outside
circleDataFrame$inOrOut <- ifelse(((circleDataFrame$circleDataX ^ 2) + (circleDataFrame$circleDataY ^ 2) <= 1), TRUE, FALSE)
# to make processing easier, subset the data frame into two
# one for points that lie inside or on the circle
# one for points that lie outside the circle
circleIn <- subset(circleDataFrame, circleDataFrame$inOrOut == TRUE)
circleOut <- subset(circleDataFrame, circleDataFrame$inOrOut == FALSE)
# Compute the Varianec Estimate by computing C-i/C-total
varianceEstimate <- (((nrow(circleIn)/nrow(circleDataFrame))*(1-(nrow(circleIn)/nrow(circleDataFrame)))) * 1/16)
# Return the variance estimate
return(varianceEstimate)
}
# We are asked to do a 1000 iterations
# Vary the total number of plotted points randomly between 1000 and 10000
# compute the variance using equation 2 above
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
# With each of 1000 tests, the number of plotted points is going to be changed. Keep track of total.
totalPoints <- integer(1000)
# Loop 1000 times over the variance.estimate() function
# start with count of 0
iterations <- 0
#
# Main routine to collect 1000 variance estimates
#
while (iterations < 1000) {
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[iterations] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[iterations] <- (variance.estimate(totalPoints[iterations]))/totalPoints[iterations]
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
## Homework 4, Bonus Question Part 2 : Implement Equation 2 and do the Numerical procedure 1000 times and calculate the variance estimate
variance.estimate <- function (n=100) {
# Generate x anf y coordinates in the range -1 to 1
circleDataX <- runif(n, min=-1, max=1)
circleDataY <- runif(n, min=-1, max=1)
# add a flag to record whether a point is inside the circle (TRUE) or outside the circle (FALSE)
inOrOut <- logical(n)
# Create a data frame to maintain all the data
circleDataFrame <- data.frame(circleDataX, circleDataY, inOrOut)
# Sort the coordinates as to whether they are inside or on the circle or whether they are outside
circleDataFrame$inOrOut <- ifelse(((circleDataFrame$circleDataX ^ 2) + (circleDataFrame$circleDataY ^ 2) <= 1), TRUE, FALSE)
# to make processing easier, subset the data frame into two
# one for points that lie inside or on the circle
# one for points that lie outside the circle
circleIn <- subset(circleDataFrame, circleDataFrame$inOrOut == TRUE)
circleOut <- subset(circleDataFrame, circleDataFrame$inOrOut == FALSE)
# Compute the Varianec Estimate by computing C-i/C-total
varianceEstimate <- (((nrow(circleIn)/nrow(circleDataFrame))*(1-(nrow(circleIn)/nrow(circleDataFrame)))) * 1/16)
# Return the variance estimate
return(varianceEstimate)
}
# We are asked to do a 1000 iterations
# Vary the total number of plotted points randomly between 1000 and 10000
# compute the variance using equation 2 above
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
# With each of 1000 tests, the number of plotted points is going to be changed. Keep track of total.
totalPoints <- integer(1000)
# Loop 1000 times over the variance.estimate() function
# start with count of 0
iterations <- 0
#
# Main routine to collect 1000 variance estimates
#
while (iterations < 10) {
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[iterations] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[iterations] <- (variance.estimate(totalPoints[iterations]))/totalPoints[iterations]
#Increment iterations, need to stop at 999
iterations <- iterations + 1
}
# Vary the total number of plotted points randomly between 1000 and 10000
+     # One random integer between 1000 and 10000 is returned, save it
+     totalPoints[iterations] <- sample(1000:10000, 1)
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[iterations] <- sample(1000:10000, 1)
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints
# We are asked to do a 1000 iterations
# Vary the total number of plotted points randomly between 1000 and 10000
# compute the variance using equation 2 above
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
# With each of 1000 tests, the number of plotted points is going to be changed. Keep track of total.
totalPoints <- integer(1000)
# Loop 1000 times over the variance.estimate() function
# start with count of 0
iterations <- 1
#
# Main routine to collect 1000 variance estimates
#
while (iterations <= 10) {
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[iterations] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[iterations] <- (variance.estimate(totalPoints[iterations]))/totalPoints[iterations]
#Increment iterations, need to stop at 1000
iterations <- iterations + 1
}
totalPoints
# We are asked to do a 1000 iterations
# Vary the total number of plotted points randomly between 1000 and 10000
# compute the variance using equation 2 above
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
# With each of 1000 tests, the number of plotted points is going to be changed. Keep track of total.
totalPoints <- integer(1000)
# Loop 1000 times over the variance.estimate() function
# start with count of 0
iterations <- 1
#
# Main routine to collect 1000 variance estimates
#
while (iterations <= 1000) {
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[iterations] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[iterations] <- (variance.estimate(totalPoints[iterations]))/totalPoints[iterations]
#Increment iterations, need to stop at 1000
iterations <- iterations + 1
}
varianceEstimate
# Function variance.estimate implements Equation 2
variance.estimate <- function (n=100) {
# Generate x and y coordinates in the range -1 to 1
circleDataX <- runif(n, min=-1, max=1)
circleDataY <- runif(n, min=-1, max=1)
# add a flag to record whether a point is inside the circle (TRUE) or outside the circle (FALSE)
inOrOut <- logical(n)
# Create a data frame to maintain all the data
circleDataFrame <- data.frame(circleDataX, circleDataY, inOrOut)
# Sort the coordinates as to whether they are inside or on the circle or whether they are outside
circleDataFrame$inOrOut <- ifelse(((circleDataFrame$circleDataX ^ 2) + (circleDataFrame$circleDataY ^ 2) <= 1), TRUE, FALSE)
# to make processing easier, subset the data frame into two
# one for points that lie inside or on the circle
# one for points that lie outside the circle
circleIn <- subset(circleDataFrame, circleDataFrame$inOrOut == TRUE)
circleOut <- subset(circleDataFrame, circleDataFrame$inOrOut == FALSE)
# Compute the Varianec Estimate by computing C-i/C-total
varianceEstimate <- (((nrow(circleIn)/nrow(circleDataFrame))*(1-(nrow(circleIn)/nrow(circleDataFrame)))) * 1/16)
# Return the variance estimate
return(varianceEstimate)
}
# We are asked to do a 1000 iterations
# Vary the total number of plotted points randomly between 1000 and 10000
# compute the variance using equation 2 above
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
# With each of 1000 tests, the number of plotted points is going to be changed. Keep track of total.
totalPoints <- integer(1000)
# Loop 1000 times over the variance.estimate() function
# start with count of 0
trials <- 1
#
# Main routine to collect 1000 variance estimates
#
while (trials <= 1000) {
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[trials] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[trials] <- (variance.estimate(totalPoints[trials]))
#Increment iterations, need to stop at 1000
trials <- trials + 1
}
varianceEstimate
totalPoints
variance(varianceEstimate)
var(varianceEstimate)
variance.estimate <- function (n=100) {
# Generate x and y coordinates in the range -1 to 1
circleDataX <- runif(n, min=-1, max=1)
circleDataY <- runif(n, min=-1, max=1)
# add a flag to record whether a point is inside the circle (TRUE) or outside the circle (FALSE)
inOrOut <- logical(n)
# Create a data frame to maintain all the data
circleDataFrame <- data.frame(circleDataX, circleDataY, inOrOut)
# Sort the coordinates as to whether they are inside or on the circle or whether they are outside
circleDataFrame$inOrOut <- ifelse(((circleDataFrame$circleDataX ^ 2) + (circleDataFrame$circleDataY ^ 2) <= 1), TRUE, FALSE)
# to make processing easier, subset the data frame into two
# one for points that lie inside or on the circle
# one for points that lie outside the circle
circleIn <- subset(circleDataFrame, circleDataFrame$inOrOut == TRUE)
circleOut <- subset(circleDataFrame, circleDataFrame$inOrOut == FALSE)
# Compute the Varianec Estimate by computing C-i/C-total
varianceEstimate <- (((nrow(circleIn)/nrow(circleDataFrame))*(1-(nrow(circleIn)/nrow(circleDataFrame)))) * 1/16)
# Return the variance estimate
return(varianceEstimate)
}
# We are asked to do a 1000 iterations
# Vary the total number of plotted points randomly between 1000 and 10000
# compute the variance using equation 2 above
# Initialize 1000 entry vectors to hold data and results
varianceEstimate <- integer(1000)
# With each of 1000 tests, the number of plotted points is going to be changed. Keep track of total.
totalPoints <- integer(1000)
# Loop 1000 times over the variance.estimate() function
# start with count of 0
trials <- 1
#
# Main routine to collect 1000 variance estimates
#
while (trials <= 1000) {
# Vary the total number of plotted points randomly between 1000 and 10000
# One random integer between 1000 and 10000 is returned, save it
totalPoints[trials] <- sample(1000:10000, 1)
# Compute the variance estimate
varianceEstimate[trials] <- (variance.estimate(totalPoints[trials]))
#Increment iterations, need to stop at 1000
trials <- trials + 1
}
varianceEstimate
variance.estimate(1)
variance.estimate(2)
variance.estimate(10
)
variance.estimate(100)
variance.estimate(1000)
variance.estimate(100000)
variance.estimate(3)
variance.estimate(4)
variance.estimate(5)
variance.estimate(6)
variance.estimate(5)
variance.estimate(1)
variance.estimate(1)
variance.estimate(1)
variance.estimate(1)
variance.estimate(1)
variance.estimate(1)
variance.estimate(1)
variance.estimate(1)
variance.estimate(1)
variance.estimate(1)
variance.estimate(2)
variance.estimate(2)
variance.estimate(2)
variance.estimate(2)
variance.estimate(2)
variance.estimate(2)
variance.estimate(2)
variance.estimate(2)
variance.estimate(2)
?setdiff
?fig.show
??fig.show
?show
?rnorm
