nrow(datingDF)
# Study the flirted_online variable before using it
str(datingDF$flirted_online)
class(datingDF$flirted_online)
levels(datingDF$flirted_online)
# The flirted_online attribute is a factor with 5 levels
# including " ", "Don't know" and "Refused"
# Convert the " ", Don't know" and "refused" into NA
datingDF$flirted_online[datingDF$flirted_online == " "] <- NA
datingDF$flirted_online[datingDF$flirted_online == "Don't know"] <- NA
datingDF$flirted_online[datingDF$flirted_online == "Refused"] <- NA
# drop the unused factor levels
datingDF$flirted_online <- droplevels(datingDF$flirted_online)
str(datingDF$flirted_online)
class(datingDF$flirted_online)
levels(datingDF$flirted_online)
datingDF[datingDF$flirted_online == "No",]
datingDF
head(datingDF)
datingdf[1:20,]
datingDF[1:20,]
# drop the unused factor levels
datingDF$flirted_online <- droplevels(datingDF$flirted_online)
# Study the flirted_online variable before using it
str(datingDF$flirted_online)
class(datingDF$flirted_online)
levels(datingDF$flirted_online)
nrow(datingDF[datingDF$flirted_online =="Yes",])
nrow(datingDF[datingDF$flirted_online =="No",])
nrow(datingDF)
nrow(datingDF[datingDF$flirted_online ="No",])
length(datingDF$flirted_online[datingDF$flirted_online =="No",])
length(datingDF$flirted_online[datingDF$flirted_online =="No"])
length(datingDF$flirted_online[datingDF$flirted_online =="Yes"])
library(xlsx)
write.xlsx(datingDF, "junkdata.xlsx")
datingDF
getwd()
write.xlsx(datingDF, file = "junkdata.xlsx", sheetName = "Test")
# Now look for complete cases across all of flirted_online
# Note : data in datingDF is being copied into completeDF
completeDF <- datingDF[complete.cases(datingDF$flirted_online),]
nrow(completeDF)
nrow(completeDF[completeDF$flirted_online =="Yes",])
nrow(completeDF[completeDF$flirted_online =="No",])
odds_flirted <- nrow(completeDF[completeDF$flirted_online =="Yes",])/nrow(completeDF[completeDF$flirted_online =="No",])
odds_flirted
str(datingDF$usr)
class(datingDF$usr)
levels(datingDF$usr)
# Convert the usr value of " " to NA prior to using it
datingDF$usr[completeDF$usr == " "] <- NA
str(datingDF$usr)
class(datingDF$usr)
levels(datingDF$usr)
# drop the unused factor levels
datingDF$usr <- droplevels(datingDF$usr)
str(datingDF$usr)
class(datingDF$usr)
levels(datingDF$usr)
# drop the unused factor levels
datingDF$usr <- droplevels(datingDF$usr)
str(datingDF$usr)
class(datingDF$usr)
levels(datingDF$usr)
levels(completeDF$usr)
datingDF$usr
datingDF$usr[datingDF$usr == " "] <- NA
datingDF$usr
completeGLMDF <- datingDF[complete.cases(datingDF$flirted_online, datingDF$usr),]
nrow(completeGLMDF)
completeGLMDF <- datingDF[complete.cases(datingDF$flirted_online, datingDF$usr),]
contrasts(completeGLMDF$usr)
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
summary(glmModel)
glmModel$aic
round(3, glmModel$aic)
round(glmModel$aic, 1)
round(glmModel$aic, 2)
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
summary(glmModel)
glmModel$aic
glmModel$coefficients
odds <- exp(glmModel$coefficients)
exp(confint(glmModel))
odds
contrasts(completeGLMDF$usr)
summary(glmModel)
# start from original data set
datingDF <- read.csv("Dating.csv", header=TRUE)
# Study the usr variable (where the respondent lives) before using the variable
str(datingDF$usr)
class(datingDF$usr)
levels(datingDF$usr)
# Convert the usr value of " " to NA prior to using it
datingDF$usr[datingDF$usr == " "] <- NA
# drop the unused factor levels
datingDF$usr <- droplevels(datingDF$usr)
nrow(datingDF)
# Find the number of rows that have no missing values for
# flirted_online and usr
completeGLMDF <- datingDF[complete.cases(datingDF$flirted_online, datingDF$usr),]
nrow(datingDF)
nrow(completeGLMDF)
# start from original data set
datingDF <- read.csv("Dating.csv", header=TRUE)
# Study the flirted_online variable before using it
str(datingDF$flirted_online)
class(datingDF$flirted_online)
levels(datingDF$flirted_online)
# The flirted_online attribute is a factor with 5 levels
# including " ", "Don't know" and "Refused"
# Convert the " ", Don't know" and "refused" into NA
datingDF$flirted_online[datingDF$flirted_online == " "] <- NA
datingDF$flirted_online[datingDF$flirted_online == "Don't know"] <- NA
datingDF$flirted_online[datingDF$flirted_online == "Refused"] <- NA
# drop the unused factor levels
datingDF$flirted_online <- droplevels(datingDF$flirted_online)
# Now look for complete cases across all of flirted_online
# Note : data in datingDF is being copied into completeDF
completeDF <- datingDF[complete.cases(datingDF$flirted_online),]
# What are the odds that a respondent in the sample has flirted online at some point
odds_flirted <- nrow(completeDF[completeDF$flirted_online =="Yes",])/nrow(completeDF[completeDF$flirted_online =="No",])
odds_flirted
# Study the usr variable (where the respondent lives) before using the variable
str(datingDF$usr)
class(datingDF$usr)
levels(datingDF$usr)
# Convert the usr value of " " to NA prior to using it
datingDF$usr[datingDF$usr == " "] <- NA
# drop the unused factor levels
datingDF$usr <- droplevels(datingDF$usr)
# Find the number of rows that have no missing values for
# flirted_online and usr
completeGLMDF <- datingDF[complete.cases(datingDF$flirted_online, datingDF$usr),]
nrow(completeGLMDF)
contrasts(completeGLMDF$usr)
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
summary(glmModel)
glmModel$aic
glmModel$coefficients
odds <- exp(glmModel$coefficients)
odds
levels(completeGLMDF$flirted_online)
levels(completeGLMDF$usr)
str(datingDF$usr)
class(datingDF$usr)
levels(datingDF$usr)
# Convert the usr value of " " to NA prior to using it
datingDF$usr[datingDF$usr == " "] <- NA
# drop the unused factor levels
datingDF$usr <- droplevels(datingDF$usr)
# Find the number of rows that have no missing values for
# flirted_online and usr
completeGLMDF <- datingDF[complete.cases(datingDF$flirted_online, datingDF$usr),]
# Look at the creation of dummy variable combinations for the 3 tiers in usr
contrasts(completeGLMDF$usr)
# verify levels
levels(completeGLMDF$usr) # "rural" is baseline
levels(completeGLMDF$flirted_online) # "No" is baseline
# Run the Logistical Regression
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
# Look at the data from Logistical Regression
summary(glmModel)
glmModel$aic
glmModel$coefficients
odds <- exp(glmModel$coefficients)
odds
odds[3]
odds[1]
odds[2]
odds
2.10/.158
# start from original data set
datingDF <- read.csv("Dating.csv", header=TRUE)
# Study the flirted_online variable before using it
str(datingDF$flirted_online)
class(datingDF$flirted_online)
levels(datingDF$flirted_online)
# The flirted_online attribute is a factor with 5 levels
# including " ", "Don't know" and "Refused"
# Convert the " ", Don't know" and "refused" into NA
datingDF$flirted_online[datingDF$flirted_online == " "] <- NA
datingDF$flirted_online[datingDF$flirted_online == "Don't know"] <- NA
datingDF$flirted_online[datingDF$flirted_online == "Refused"] <- NA
# drop the unused factor levels
datingDF$flirted_online <- droplevels(datingDF$flirted_online)
levels(datingDF$flirted_online)
# Now look for complete cases across all of flirted_online
# Note : data in datingDF is being copied into completeDF
completeDF <- datingDF[complete.cases(datingDF$flirted_online),]
# What are the odds that a respondent in the sample has flirted online at some point
odds_flirted <- nrow(completeDF[completeDF$flirted_online =="Yes",])/nrow(completeDF[completeDF$flirted_online =="No",])
odds_flirted
# Study the usr variable (where the respondent lives) before using the variable
str(datingDF$usr)
class(datingDF$usr)
levels(datingDF$usr)
# Convert the usr value of " " to NA prior to using it
datingDF$usr[datingDF$usr == " "] <- NA
# drop the unused factor levels
datingDF$usr <- droplevels(datingDF$usr)
levels(datingDF$usr)
# Find the number of rows that have no missing values for
# flirted_online and usr
completeGLMDF <- datingDF[complete.cases(datingDF$flirted_online, datingDF$usr),]
# Establish the number of complete rows
nrow(completeGLMDF)
# Look at the creation of dummy variable combinations for the 3 tiers in usr
contrasts(completeGLMDF$usr)
# verify levels
levels(completeGLMDF$usr) # "rural" is baseline
levels(completeGLMDF$flirted_online) # "No" is baseline
# Run the Logistical Regression
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
# Look at the data from Logistical Regression
summary(glmModel)
glmModel$aic
# get a feel for the overall fit of the model using analysis of deviance
glmModel_AoD <- anova(glmModel, test = "Chisq")
glmModel_AoD
summary(glmModel_AoD)
glmModel$coefficients
odds <- exp(glmModel$coefficients)
odds
# relevel towards Suburban
completeGLMDF$usr <- relevel(completeGLMDF$usr, "Suburban")
levels( completeGLMDF$usr)
# Run the Logistical Regression
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
# Look at the data from Logistical Regression
summary(glmModel)
glmModel$aic
glmModel$coefficients
odds <- exp(glmModel$coefficients)
odds
1.3138/0.6252
completeGLMDF$usr <- relevel(completeGLMDF$usr, "Rural")
# Run the Logistical Regression
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
# Look at the data from Logistical Regression
summary(glmModel)
glmModel$aic
# get a feel for the overall fit of the model using analysis of deviance
glmModel_AoD <- anova(glmModel, test = "Chisq")
glmModel_AoD
glmModel$coefficients
odds <- exp(glmModel$coefficients)
odds
junk_U <- completeGLMDF$usr[completeGLMDF$usr == "Urban", ]
junk_U <- completeGLMDF$usr[completeGLMDF$usr == "Urban" ]
length(junk_U)
junk_R <- completeGLMDF$usr[completeGLMDF$usr == "Rural" ]
length(junk_R)
junk_S <- completeGLMDF$usr[completeGLMDF$usr == "Suburban" ]
junk_S
length(junk_S)
junk_U + junk_R + junk_S
length(junk_U) + length(junk_R) + length(junk_S)
length(completeGLMDF$usr)
length(junk_S)
length(junk_R)
length(junk_U)
# relevel towards Suburban
completeGLMDF$usr <- relevel(completeGLMDF$usr, "Suburban")
# Run the Logistical Regression
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
# Look at the data from Logistical Regression
summary(glmModel)
glmModel$aic
# get a feel for the overall fit of the model using analysis of deviance
glmModel_AoD <- anova(glmModel, test = "Chisq")
glmModel_AoD
glmModel$coefficients
# Look at the exponent of the coefficient to get a feel for increase in odds
odds <- exp(glmModel$coefficients)
odds
# relevel towards Suburban
completeGLMDF$usr <- relevel(completeGLMDF$usr, "Rural")
# Run the Logistical Regression
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
# Look at the data from Logistical Regression
summary(glmModel)
glmModel$aic
# get a feel for the overall fit of the model using analysis of deviance
glmModel_AoD <- anova(glmModel, test = "Chisq")
glmModel_AoD
glmModel$coefficients
# Look at the exponent of the coefficient to get a feel for increase in odds
odds <- exp(glmModel$coefficients)
odds
# relevel towards Suburban
completeGLMDF$usr <- relevel(completeGLMDF$usr, "Suburban")
# Run the Logistical Regression
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial())
# Look at the data from Logistical Regression
summary(glmModel)
glmModel$aic
# get a feel for the overall fit of the model using analysis of deviance
glmModel_AoD <- anova(glmModel, test = "Chisq")
glmModel_AoD
glmModel$coefficients
# Look at the exponent of the coefficient to get a feel for increase in odds
odds <- exp(glmModel$coefficients)
odds
1.3138/.6252
glmModel_AoD <- anova(glmModel, test = "Chisq")
glmModel_AoD
summary(glmModel_AoD)
getwd()
ls()
system("ls")
# Set a seed for repeatable results, when needed
set.seed(123456)
# Read in the dating csv file and look at contents
datingDF <- read.csv("Dating.csv", header=TRUE)
# Start by recording the original number of rows - 2252
nrow(datingDF)
# Check the construct of the life_quality variable
str(datingDF$life_quality)
class(datingDF$life_quality)
levels(datingDF$life_quality)
# life_quality attribute is a factor with 7 levels including "Don't know" and "Refused"
# Convert the "Don't know" and "refused" factors into <NA>
datingDF$life_quality[datingDF$life_quality == "Don't know"] <- NA # There are 8 instances
datingDF$life_quality[datingDF$life_quality == "Refused"] <- NA # there are 12 instances
# Now that two factors have been dropped, ensure that factor levels is reset
datingDF$life_quality <- droplevels(datingDF$life_quality)
levels(datingDF$life_quality)
# reverse the ranking within life_quality so that 5 = excellent and 1 = poor
datingDF$life_quality <- (max(datingDF$life_quality, na.rm = T) +
min(datingDF$life_quality, na.rm = T) - datingDF$life_quality)
# What is the mean quality_of_life in the sample
meanQoL <- mean(datingDF$life_quality, na.rm = T)
meanQoL
# convert life_quality data into numeric form
datingDF$life_quality <- as.numeric(datingDF$life_quality)
# reverse the ranking within life_quality so that 5 = excellent and 1 = poor
datingDF$life_quality <- (max(datingDF$life_quality, na.rm = T) +
min(datingDF$life_quality, na.rm = T) - datingDF$life_quality)
# What is the mean quality_of_life in the sample
meanQoL <- mean(datingDF$life_quality, na.rm = T)
meanQoL
datingDF$life_quality
meanQoL <- mean(datingDF$life_quality)
meanQoL
meanQoL <- mean(datingDF$life_quality, na.rm = TRUE)
meanQoL
# Check the construct of the years_in_relationship variable
class(datingDF$years_in_relationship)
levels(datingDF$years_in_relationship)
```
## \textcolor{red}{The number "97" looks suspicious but the Pew site does not say anything suspicious other than "97 or more"}
```{r error=TRUE, fig.width = 6, fig.height = 4.5}
# The years_in_relationship attribute is a factor with 7 levels including " " and "Refused"
# Convert the "Don't know" and "refused" into <NA>
datingDF$years_in_relationship[datingDF$years_in_relationship == " "] <- NA
datingDF$years_in_relationship[datingDF$years_in_relationship == "Refused"] <- NA
# Now that two factors have been removed, redo the factor levels
datingDF$years_in_relationship <- droplevels(datingDF$years_in_relationship)
levels(datingDF$years_in_relationship)
datingDF$years_in_relationship <- droplevels(datingDF$years_in_relationship)
levels(datingDF$years_in_relationship)
# Recode the years_in_relationship values as numeric
datingDF$years_in_relationship <- as.numeric(as.character(datingDF$years_in_relationship))
nrow(datingDF)
datingDF$years_in_relationship
?na.rm
?na
meanQoL <- mean(datingDF$life_quality, na.rm = TRUE)
meanQoL
nrow(datingDF)
# Study the use_internet variable before using it
str(datingDF$use_internet)
class(datingDF$use_internet)
levels(datingDF$use_internet)
# The years_in_relationship attribute is a factor with 5 levels
# including " ", "Don't know" and "Refused"
# Convert the "Don't know" and "refused" into NA
datingDF$use_internet[datingDF$use_internet == " "] <- NA
datingDF$use_internet[datingDF$use_internet == "Don't know"] <- NA
datingDF$use_internet[datingDF$use_internet == "Refused"] <- NA
# drop the unused factor levels
datingDF$use_internet <- droplevels(datingDF$use_internet)
levels(datingDF$use_internet)
# Find the number of rows that have no missing values for
# life_quality, years_in_relatinship and use_internet
# Note : data in datingDF is being copied into completeDF
completeDF <- datingDF[complete.cases(datingDF$years_in_relationship,
datingDF$life_quality, datingDF$use_internet),]
# Count the number of complete rows : 1090
nrow(completeDF)
meanQoL <- mean(completeDF$life_quality, na.rm = TRUE)
meanQoL
# Fit an OLS model to the data in the previpus step that predicts life_quality
# as a linear function of years_in_relationship
modelYiR <- lm(life_quality ~ years_in_relationship, data = completeDF, na.action = na.fail)
summary(modelYiR)
# Look for practical significance through R^2, P-value and F value
anova_modelYiR <- anova(modelYiR)
anova_modelYiR
# Fit an OLS model to the data in the previpus step that predicts life_quality
# as a linear function of years_in_relationship
modelYiR <- lm(life_quality ~ years_in_relationship, data = completeDF, na.action = na.fail)
summary(modelYiR)
# Look for practical significance through R^2, P-value and F value
anova_modelYiR <- anova(modelYiR)
anova_modelYiR
# Fit an OLS model to the data that predicts life_quality
# as a linear function of years_in_relationship AND use_internet
modelYiR_UI <- lm(life_quality ~ years_in_relationship + use_internet, data = completeDF)
summary(modelYiR_UI)
# Look for practical significance through F value
anova_modelYiR_UI <- anova(modelYiR_UI)
anova_modelYiR_UI
modelYiR_UI <- lm(life_quality ~ years_in_relationship + use_internet, data = completeDF, na.action = na.fail)
summary(modelYiR_UI)
# Look for practical significance through F value and R^2 value
anova_modelYiR_UI <- anova(modelYiR_UI)
anova_modelYiR_UI
# Compute the F ratio and associated p-value between the two regression models
# Assess the improvement from the first model to the second
modelComparisonData <- anova(modelYiR, modelYiR_UI)
modelComparisonData
# extract the F value
modelComparisonData$F[2]
# extract the p-value
modelComparisonData$Pr[2]
# start from original data set
datingDF <- read.csv("Dating.csv", header=TRUE)
# Study the flirted_online variable before using it
str(datingDF$flirted_online)
class(datingDF$flirted_online)
levels(datingDF$flirted_online)
# The flirted_online attribute is a factor with 5 levels
# including " ", "Don't know" and "Refused"
# Convert the " ", Don't know" and "refused" into NA
datingDF$flirted_online[datingDF$flirted_online == " "] <- NA
datingDF$flirted_online[datingDF$flirted_online == "Don't know"] <- NA
datingDF$flirted_online[datingDF$flirted_online == "Refused"] <- NA
# drop the unused factor levels
datingDF$flirted_online <- droplevels(datingDF$flirted_online)
levels(datingDF$flirted_online)
# Now look for complete cases across all of flirted_online
# Note : data in datingDF is being copied into completeDF
completeDF <- datingDF[complete.cases(datingDF$flirted_online),]
# Compute new number of valid rows
nrow(completeDF)
completeDF[completeDF$flirted_online =="Yes",])
completeDF[completeDF$flirted_online =="Yes",]
nrow(completeDF[completeDF$flirted_online =="Yes",])
nrow(completeDF[completeDF$flirted_online =="No",])
odds_flirted
odds_flirted <- nrow(completeDF[completeDF$flirted_online =="Yes",])/nrow(completeDF[completeDF$flirted_online =="No",])
odds_flirted
str(datingDF$usr)
class(datingDF$usr)
levels(datingDF$usr)
# Convert the usr value of " " to NA prior to using it
datingDF$usr[datingDF$usr == " "] <- NA
# drop the unused factor levels
datingDF$usr <- droplevels(datingDF$usr)
levels(datingDF$usr)
# Find the number of rows that have no missing values for
# flirted_online and usr
completeGLMDF <- datingDF[complete.cases(datingDF$flirted_online, datingDF$usr),]
# Establish the number of complete rows
nrow(completeGLMDF)
nrow(completeDF)
datingDF$usr
datingDF[datingDR$usr != "Suburban" & datingDR$usr != "Rural" & datingDR$usr != "Urban",]
datingDF[datingDF$usr != "Suburban" & datingDF$usr != "Rural" & datingDF$usr != "Urban",]
# Look at the creation of dummy variable combinations for the 3 tiers in usr
contrasts(completeGLMDF$usr)
# verify levels of each categorivcal variable prior to processing
levels(completeGLMDF$usr) # "rural" is baseline
levels(completeGLMDF$flirted_online) # "No" is baseline
# relevel towards "Suburban"" so that we can directly see odds for focus
# groups "Rural"" and "Urban" and the odds can be directly compared
completeGLMDF$usr <- relevel(completeGLMDF$usr, "Suburban")
contrasts(completeGLMDF$usr)
glmModel <- glm(flirted_online ~ usr, data = completeGLMDF, family = binomial(), na.action = na.fail)
# Look at the data from Logistical Regression
summary(glmModel)
glmModel$aic
# get a feel for the overall fit of the model using analysis of deviance
glmModel_AoD <- anova(glmModel, test = "Chisq")
glmModel_AoD
# Check confidence intervals of the coefficients
exp(confint(glmModel))
glmModel$coefficients
# Look at the exponent of the coefficient to get a feel for increase in odds
odds <- exp(glmModel$coefficients)
odds
# How much bigger are the odds that an urban responden has flirted online
# than the odds that a rural respondent has flirted online
odds[3]/odds[2]
odds$usrUrban/odds$usrRural
str(odds)
anova(odds)
anova(glmModel)
glmModel_AoD <- anova(glmModel, test = "Chisq")
glmModel_AoD
str(glmModel)
str(summary(glmModel))
summary(glmModel)$coefficients[4]
summary(glmModel)$coefficients
summary(glmModel)
glmModel
anova(glmModel)
summary(anova(glmModel))
