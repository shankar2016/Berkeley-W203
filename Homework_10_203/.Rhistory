yDF199 <- dt(xNormal, 199) # Sample size is 200, df is 200 - 1, that is 199
# Create a data frame with all 3 distributions together
xAxis=c(xNormal, xNormal, xNormal, xNormal)
yAxis <- c(yNormal, yDF10, yDF25, yDF199)
tags <- rep(c("Normal", "tD with df=9", "tD with df=24", "tD with df=199"), each = 1000)
dfT <- data.frame(xAxis, yAxis, tags, each=1000)
# Plot just the base Normal Curve
compositePlot <- ggplot(dfNormal, aes(xNormal, yNormal))
compositePlot <- compositePlot + geom_line(size=1.5, col="Red")
# Now plot the 3 t Distributions
compositePlot <- compositePlot + geom_line(data = dfT, aes(xAxis, yAxis, col=factor(tags))) + geom_line(size=1.0) +
ggtitle("Normal distribution and \n t-distribution with df = 9, 24, 199") + # Set the title
labs(x="X", y="Density") + # Set the axes
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=24, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=22)) +  # Set theme for text
theme(legend.title=element_text(colour="Black", size=16, face="bold")) +  # Set the legend
scale_colour_discrete(name = "Colors for Normal \nand T-Distribution") + # Set the legend
#guides(col = guide_legend(reverse = TRUE)) +
scale_y_continuous(limits = c(0.0, 0.5)) +
scale_x_continuous(limits = c(-5, 5))
# Plot and capture the 4 plots
compositePlot
# Zoom in on the tail
compositePlot + coord_cartesian(xlim = c(1.75,4.5),ylim= c(0,0.1)) + ggtitle("Tail Zoom: Normal distribution and t-distrbution with df = 199, 24, 9")
# Zoom in on the peak
compositePlot + coord_cartesian(xlim = c(-1.0,1.0),ylim= c(0.3,0.4)) + ggtitle("Head Zoom: Normal distribution and t-distrbution with df = 199, 24, 9")
# Pull in all needed libraries
library("ggplot2")
# Create the base data for a Normal distribution
xNormal   <- seq(-5, 5,length=1000)
yNormal   <- dnorm(xNormal,mean=0, sd=1)
# Create  a dataframe for the Normal distribution with the created data to facilitate ggplot
dfNormal <- data.frame(xNormal,yNormal)
# Create t-distributions for various levels of degrees of freedom
yDF10 <- dt(xNormal, 9) # Sample size is 10, df is 10 - 1, that is 9
yDF25 <- dt(xNormal, 24) # Sample size is 25, df is 25 - 1, that is 24
yDF199 <- dt(xNormal, 199) # Sample size is 200, df is 200 - 1, that is 199
# Create a data frame with all 3 distributions together
xAxis=c(xNormal, xNormal, xNormal, xNormal)
yAxis <- c(yNormal, yDF10, yDF25, yDF199)
tags <- rep(c("Normal", "tD with df=9", "tD with df=24", "tD with df=199"), each = 1000)
dfT <- data.frame(xAxis, yAxis, tags, each=1000)
# Plot just the base Normal Curve
compositePlot <- ggplot(dfNormal, aes(xNormal, yNormal))
compositePlot <- compositePlot + geom_line(size=1.5, col="Red")
# Now plot the 3 t Distributions
compositePlot <- compositePlot + geom_line(data = dfT, aes(xAxis, yAxis, col=factor(tags))) + geom_line(size=1.0) +
ggtitle("Normal distribution and \n t-distribution with df = 9, 24, 199") + # Set the title
labs(x="X", y="Density") + # Set the axes
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=24, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=22)) +  # Set theme for text
theme(legend.title=element_text(colour="Black", size=16, face="bold")) +  # Set the legend
scale_colour_discrete(name = "Colors for Normal \nand T-Distribution") + # Set the legend
#guides(col = guide_legend(reverse = TRUE)) +
scale_y_continuous(limits = c(0.0, 0.5)) +
scale_x_continuous(limits = c(-5, 5))
# Plot and capture the 4 plots
compositePlot
# Zoom in on the tail
compositePlot + coord_cartesian(xlim = c(1.75,4.5),ylim= c(0,0.1)) + ggtitle("Tail Zoom: Normal distribution and \nt-distribution with df = 9, 24, 199")
# Zoom in on the peak
compositePlot + coord_cartesian(xlim = c(-1.0,1.0),ylim= c(0.3,0.4)) + ggtitle("Zoom at Mean: Normal distribution and \nt-distribution with df = 9, 24, 199")
twoTailAlpha.t <- function() {
cat("\n","\bEnter test cutoff Z value : ","\n")
cutoffValue <- scan(n=1, what = numeric(0), quiet=T)
cat("\n","\bEnter sample size for t-Distribution","\n")
sampleSize <- scan(n=1, what = numeric(0), quiet=T)
# Compute and output the alpha value for the given Z value
tDistributionAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
cat("\n\nComputed Alpha Value for t Distribution with df=", sampleSize -1, "is", tDistributionAlpha)
# For the specific case of Z = 1.96, point out the magnification in Type 1 eeror area
if (cutoffValue == 1.96 & abs(tDistributionAlpha) > 0.025) {
cat(", the Type I error zone is magnified")
cat("\nEstimated maginfication in error =", 100* (0.05 -  tDistributionAlpha)/0.05, "% \n")
}
}
twoTailAlpha.t()
twoTailAlpha.t <- function() {
cat("\n","\bEnter test cutoff Z value : ","\n")
cutoffValue <- scan(n=1, what = numeric(0), quiet=T)
cat("\n","\bEnter sample size for t-Distribution","\n")
sampleSize <- scan(n=1, what = numeric(0), quiet=T)
# Compute and output the alpha value for the given Z value
tDistributionAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
cat("\n\nComputed Alpha Value for t Distribution with df=", sampleSize -1, "is", tDistributionAlpha)
# For the specific case of Z = 1.96, point out the magnification in Type 1 eeror area
if (cutoffValue == 1.96 & abs(tDistributionAlpha) > 0.025) {
cat(", the Type I error zone is magnified")
cat("\nEstimated maginfication in error =", 100* (0.025 -  tDistributionAlpha)/0.025, "% \n")
}
}
twoTailAlpha.t()
twoTailAlpha.t <- function() {
cat("\n","\bEnter test cutoff Z value : ","\n")
cutoffValue <- scan(n=1, what = numeric(0), quiet=T)
cat("\n","\bEnter sample size for t-Distribution","\n")
sampleSize <- scan(n=1, what = numeric(0), quiet=T)
# Compute and output the alpha value for the given Z value
tDistributionAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
cat("\n\nComputed Alpha Value for t Distribution with df=", sampleSize -1, "is", tDistributionAlpha)
# For the specific case of Z = 1.96, point out the magnification in Type 1 eeror area
if (cutoffValue == 1.96 & abs(tDistributionAlpha) > 0.025) {
cat(", the Type I error zone is magnified")
cat("\nEstimated maginfication in error =", 100* (tDistributionAlpha - 0.025)/0.025, "% \n")
}
}
twoTailAlpha.t()
twoTailAlpha.t <- function() {
cat("\n","\bEnter test cutoff Z value : ","\n")
cutoffValue <- scan(n=1, what = numeric(0), quiet=T)
cat("\n","\bEnter sample size for t-Distribution")
sampleSize <- scan(n=1, what = numeric(0), quiet=T)
# Compute and output the alpha value for the given Z value
tDistributionAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
cat("\n\nComputed Alpha Value for t Distribution with df=", sampleSize -1, "is", tDistributionAlpha)
# For the specific case of Z = 1.96, point out the magnification in Type 1 error area
if (cutoffValue == 1.96 & abs(tDistributionAlpha) > 0.025) {
cat(", the Type I error zone is magnified")
cat("\nEstimated maginfication in error =", 100* (tDistributionAlpha - 0.025)/0.025, "% \n")
}
}
twoTailAlpha.t()
twoTailAlpha.t()
twoTailAlpha.t <- function() {
cat("\n","\bEnter test cutoff Z value : ","\n")
cutoffValue <- scan(n=1, what = numeric(0), quiet=T)
cat("\n","\bEnter sample size for t-Distribution")
sampleSize <- scan(n=1, what = numeric(0), quiet=T)
# Compute and output the alpha value for the given Z value
tDistributionAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
cat("\nComputed Real Alpha Value for t Distribution with df=", sampleSize -1, "is", tDistributionAlpha)
# For the specific case of Z = 1.96, point out the magnification in Type 1 error area
if (cutoffValue == 1.96 & abs(tDistributionAlpha) > 0.025) {
cat(", \nthe Type I error zone is magnified because of the incorrect use of Z value")
cat("\nEstimated maginfication in error =", 100* (tDistributionAlpha - 0.025)/0.025, "% \n")
}
}
twoTailAlpha.t()
qt(0.05, 200)
qt(0.025, 200)
qt(0.025, 25)
qt(0.025, 10)
getwd()
setwd("../Homework_10_203")
getwd()
getwd()
warnings()
rm(list=ls())
library("ggplot2")
# Create the base data for a Normal distribution
xNormal   <- seq(-5, 5,length=1000)
yNormal   <- dnorm(xNormal,mean=0, sd=1)
# Create  a dataframe for the Normal distribution with the created data to facilitate ggplot
dfNormal <- data.frame(xNormal,yNormal)
# Create t-distributions for various levels of degrees of freedom
yDF10 <- dt(xNormal, 9) # Sample size is 10, df is 10 - 1, that is 9
yDF25 <- dt(xNormal, 24) # Sample size is 25, df is 25 - 1, that is 24
yDF199 <- dt(xNormal, 199) # Sample size is 200, df is 200 - 1, that is 199
# Create a data frame with all 3 distributions together
xAxis=c(xNormal, xNormal, xNormal, xNormal)
yAxis <- c(yNormal, yDF10, yDF25, yDF199)
tags <- rep(c("Normal", "tD with df=9", "tD with df=24", "tD with df=199"), each = 1000)
dfT <- data.frame(xAxis, yAxis, tags, each=1000)
# Plot just the base Normal Curve
compositePlot <- ggplot(dfNormal, aes(xNormal, yNormal))
compositePlot <- compositePlot + geom_line(size=1.5, col="Red")
# Now plot the 3 t Distributions
compositePlot <- compositePlot + geom_line(data = dfT, aes(xAxis, yAxis, col=factor(tags))) + geom_line(size=1.0) +
ggtitle("Normal distribution and \n t-distribution with df = 9, 24, 199") + # Set the title
labs(x="X", y="Density") + # Set the axes
theme(plot.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=24, hjust=0)) +
theme(axis.title = element_text(family = "Trebuchet MS", color="#666666", face="bold", size=22)) +  # Set theme for text
theme(legend.title=element_text(colour="Black", size=16, face="bold")) +  # Set the legend
scale_colour_discrete(name = "Colors for Normal \nand T-Distribution") + # Set the legend
#guides(col = guide_legend(reverse = TRUE)) +
scale_y_continuous(limits = c(0.0, 0.5)) +
scale_x_continuous(limits = c(-5, 5))
# Plot and capture the 4 plots
compositePlot
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
?element_text
tags
factor(tags)
colour=factor(tags)
colour
twoTailAlpha.t <- function() {
cat("\n","\bEnter test cutoff Z value : ","\n")
cutoffValue <- scan(n=1, what = numeric(0), quiet=T)
cat("\n","\bEnter sample size for t-Distribution")
sampleSize <- scan(n=1, what = numeric(0), quiet=T)
# Compute and output the alpha value for the given Z value
tDistributionAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
cat("\nComputed Real Alpha Value for t Distribution with df=", sampleSize -1, "is", tDistributionAlpha)
# For the specific case of Z = 1.96, point out the magnification in Type 1 error area
if (cutoffValue == 1.96 & abs(tDistributionAlpha) > 0.025) {
cat(", \nthe Type I error zone is magnified because of the incorrect use of Z value")
cat("\nEstimated maginfication in error =", 100* (tDistributionAlpha - 0.025)/0.025, "% \n")
}
}
twoTailAlpha.t
twoTailAlpha.t ()
?abs
tDistributionAlpha
cutoffValue = 0
if(cutoffValue == 0)
cat ("cutoff is 0")
cutoffValue = 1.96
if(cutoffValue == 1.96)
cat ("cutoff is 1.96")
list(2, "shankar")
junk <- list(2, "shankar")
junk[[1]]
junk[[2]]
twoTailAlpha.t <- function(cutoffValue = 1.96, sampleSize = 200) {
cat("\n","\bEnter test cutoff Z value : ","\n")
cutoffValue <- scan(n=1, what = numeric(0), quiet=T)
cat("\n","\bEnter sample size for t-Distribution")
sampleSize <- scan(n=1, what = numeric(0), quiet=T)
# Compute and output the alpha value for the given Z value
tDAlpha <- 0
tDAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
cat("\nComputed Real Alpha Value for t Distribution with df=", sampleSize -1, "is", tDAlpha)
return(list(tDAlpha, cutoffValue))
}
newData <- twoTailAlpha.t()
newData
newData[[1]]
newData[[2]]
twoTailAlpha.t <- function(cutoffValue = 1.96, sampleSize = 200) {
# Compute and output the alpha value for the given Z value
tDAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
cat("\nComputed Real Alpha Value for t Distribution with df=", sampleSize -1, "is", tDAlpha)
return(list(tDAlpha, cutoffValue))
}
newData <- twoTailAlpha.t(1.96, 10)
newData
if (newData[[2]] == 1.96) {
if (newData[[1]] > 0.025) {
cat(", \nthe Type I error zone is magnified because of the incorrect use of Z value")
cat("\nEstimated maginfication in error =", 100* (tDAlpha - 0.025)/0.025, "% \n")
}
}
if (newData[[2]] == 1.96) {
if (newData[[1]] > 0.025) {
cat(", \nthe Type I error zone is magnified because of the incorrect use of Z value")
cat("\nEstimated maginfication in error =", 100* (newData[[1]] - 0.025)/0.025, "% \n")
}
}
newData[[1]]
newData
names(newData)
str(newData)
newData$1
newData <- twoTailAlpha.t(-1.96, 200)
alphaResult(newData)
twoTailAlpha.t <- function(cutoffValue = 1.96, sampleSize = 200) {
# Compute and output the alpha value for the given Z value
tDAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
return(list(tDAlpha, cutoffValue))
}
alphaResult <- function (newData) {
# For the specific case of Z = 1.96, point out the magnification in Type 1 error area
cat("Computed alpha value is", newData[[1]])
if (newData[[2]] == 1.96) {
if (abs(newData[[1]] > 0.025)) {
cat("\nthe Type I error zone is magnified because of the incorrect use of Z value")
cat("\nEstimated maginfication in error =", 100* (newData[[1]] - 0.025)/0.025, "% \n")
}
}
newData <- twoTailAlpha.t(-1.96, 200)
alphaResult(newData)
twoTailAlpha.t <- function(cutoffValue = 1.96, sampleSize = 200) {
# Compute and output the alpha value for the given Z value
tDAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
return(list(tDAlpha, cutoffValue))
}
alphaResult <- function (newData) {
# For the specific case of Z = 1.96, point out the magnification in Type 1 error area
cat("Computed alpha value is", newData[[1]])
if (newData[[2]] == 1.96) {
if (abs(newData[[1]] > 0.025)) {
cat("\nthe Type I error zone is magnified because of the incorrect use of Z value")
cat("\nEstimated maginfication in error =", 100* (newData[[1]] - 0.025)/0.025, "% \n")
}
}
}
newData <- twoTailAlpha.t(1.96, 10)
alphaResult(newData)
newData <- twoTailAlpha.t(1.96, 25)
alphaResult(newData)
newData <- twoTailAlpha.t(1.96, 200)
alphaResult(newData)
(1-pt(1.96, 9))
(1-pt(-1.96, 9))
?geom_vline
tags <- rep(c("Normal", "tD with df=9", "tD with df=24", "tD with df=199"), each = 1000)
tags
?save
?dump
options()
options$editor
?par
?options
options(editor=vi)
options
options()
options(editor="vi")
options()
save()
?save
?dump()
ls()
?optim
twoTailAlpha.t <- function(cutoffValue = 1.96, sampleSize = 200) {
# Compute and output the alpha value for the given Z value
tDAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
return(list(tDAlpha, cutoffValue))
}
twoTailAlpha.t <- function(sampleSize = 200) {
# Compute and output the alpha value for the given Z value
tDAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
return(list(tDAlpha, cutoffValue))
}
lapply(c(10, 25, 200), twoTailAlpha.t)
twoTailAlpha.t <- function(sampleSize = 200) {
cutoffValue=1.96
tDAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
return(list(tDAlpha, cutoffValue))
}
lapply(c(10, 25, 200), twoTailAlpha.t)
result <- lapply(c(10, 25, 200), twoTailAlpha.t)
result[[1]]
result[[1]][1]
result[[1]][2]
result[[1]][3]
result[[2]][2]
result[[2]][1]
result[[3]][1]
?lapply
a <-
c(10, 25, 200)
a
class(a)
str(a)
?sapply
twoTailAlpha.t <- function(cutoffValue = 1.96, sampleSize = 200) {
# Compute and output the alpha value for the given Z value
tDAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
return(list(tDAlpha, cutoffValue))
}
sapply(c(10, 25, 200), twoTailAlpha.t, cutoffValue=2.05)
sapply(c(10, 25, 200), twoTailAlpha.t, cutoffValue=1.96)
mcsapply(c(10, 25, 200), twoTailAlpha.t, cutoffValue=1.96)
mclapply(c(10, 25, 200), twoTailAlpha.t)
library(multicore)
install.packages("multicore")
library(multicore)
install.packages("parallel")
sessionInfo()
detectCores()
parallel::mclappy(c(10, 25, 200), twoTailAlpha.t)
available.packages()
grep("parallel", available.packages())
vv <- available.packages()
str(vv)
vv[[1]]
vv[1]
vv$A3
vv <- grep("parallel", available.packages())
vv[2491]
str(vv)
uu <- available.packages()
uu[[2491]]
uu[[3780]]
uu[[4692]]
vv <- grep("parallel", available.packages(), fixed=TRUE)
vv
vv <- grep("^parallel$", available.packages(), fixed=TRUE)
vv
?lapply
twoTailAlpha.t <- function(cutoffValue = 1.96, sampleSize = 200) {
# Compute and output the alpha value for the given Z value
tDAlpha <- (1 - pt(cutoffValue, sampleSize - 1))
return(list(tDAlpha, cutoffValue))
}
result <- lapply(c(10, 25, 200), twoTailAlpha.t, cutoffValue = 3.0)
result
result <- lapply(c(10, 25, 200), twoTailAlpha.t, cutoffValue = 1.96.0)
result <- lapply(c(10, 25, 200), twoTailAlpha.t, cutoffValue = 1.96)
result
?dsnorm
?rlnorm
?rnorm
?rlnorm
rpois
?rpois
y <- rpois(1000, 3)
plot y
plot(y)
skew.rnorm(num.obs = 20000, mean = 0, sd = 1, skewness = 0)
install.packages("ESPRESSO")
library(ESPRESSO)
xNormal   <- seq(-5, 5,length=1000)
xNormal   <- seq(-5, 5,length=1000)
xNormal
xNormal[1000] -xNormal[999]
xNormal[999] -xNormal[998]
xNormal[6] -xNormal[5]
?dnorm
xNormal   <- seq(-5, 7,length=1000)
mean(xNormal)
yNormal   <- dnorm(xNormal,mean=0, sd=1)
dfNormal <- data.frame(xNormal,yNormal)
compositePlot <- ggplot(dfNormal, aes(xNormal, yNormal))
compositePlot <- compositePlot + geom_line(size=1.0, col="Red")
library("ggplot2")
compositePlot <- ggplot(dfNormal, aes(xNormal, yNormal))
compositePlot <- compositePlot + geom_line(size=1.0, col="Red")
compositePlot
xNormal   <- seq(-5, 10,length=1000)
yNormal   <- dnorm(xNormal,mean=0, sd=1)
dfNormal <- data.frame(xNormal,yNormal)
compositePlot <- ggplot(dfNormal, aes(xNormal, yNormal))
compositePlot <- compositePlot + geom_line(size=1.0, col="Red")
compositePlot
yNormal   <- dnorm(xNormal,mean=0)
dfNormal <- data.frame(xNormal,yNormal)
compositePlot <- ggplot(dfNormal, aes(xNormal, yNormal))
compositePlot <- compositePlot + geom_line(size=1.0, col="Red")
compositePlot
?rnorm
yNormal <- rnorm(1000, mean = -1)
dfNormal <- data.frame(xNormal,yNormal)
compositePlot <- ggplot(dfNormal, aes(xNormal, yNormal))
compositePlot <- compositePlot + geom_line(size=1.0, col="Red")
compositePlot
yNormal
histogram(yNormal)
hist(yNormal)
yNormal <- rnorm(1000, mean = -2)
dfNormal <- data.frame(xNormal,yNormal)
compositePlot <- ggplot(dfNormal, aes(xNormal, yNormal))
compositePlot <- compositePlot + geom_line(size=1.0, col="Red")
compositePlot
hist(yNormal)
yNormal <- rnorm(1000, mean = -4)
dfNormal <- data.frame(xNormal,yNormal)
hist(yNormal)
?rpois
yNormal <- rpois(1000, 3)
hist(yNormal)
yNormal <- rpois(1000, 1)
hist(yNormal)
yNormal <- rpois(1000, 0.5)
hist(yNormal)
yNormal <- rpois(1000, 1)
hist(yNormal)
yNormal <- rpois(1000, 3)
hist(yNormal)
yNormal <- rpois(1000, 10)
hist(yNormal)
yNormal <- rpois(1000, 4)
hist(yNormal)
yNormal <- rpois(1000, 6)
hist(yNormal)
mean(ynormal)
mean(yNormal)
median(yNormal)
yNormal <- rpois(1000, 20)
median(yNormal)
hist(yNormal)
median(yNormal)
mean(yNormal)
?rbeta
yNormal <- rbeta(1000, 1, 5)
hist(yNormal)
yNormal <- rbeta(1000, 4, 5)
hist(yNormal)
yNormal <- rbeta(1000, 3, 5)
hist(yNormal)
mean(yNormal)
median(yNormal)
yNormal <- rbeta(1000, 2, 5)
hist(yNormal)
mean(yNormal)
median(yNormal)
yNormal <- rnorm(1000, mean = -4) + rnorm(1000, mean = -2)
hist(yNormal)
mean(yNormal)
median(yNormal)
y <- qchisq(.95, df=7)
hist(y)
y <- rchisq(.95, df=7)
hist(y)
y
?rchisq
y <- rchisq(1000, df=7)
hist(y)
mean(y)
median(y)
?rchisq
?rpois
rpois(1000, 4)
y <- rpois(1000, 4)
hist(y)
mean(y)
median(y)
