merged_country_data$gdp_growth/merged_country_data$Population
plot(merged_country_data$Birthrate - merged_country_data$Deathrate, 1000* merged_country_data$gdp_growth/merged_country_data$Population,  las=2, ylim=c(-2e+11, 2e+11), cex.axis=0.7, main="Correlation between Population and GDP GrowthRate", xlab="Population", ylab="GDP Growth, 2011 to 2012")
plot(merged_country_data$Area/merged_country_data$Population, merged_country_data$gdp_growth,  las=2, ylim=c(-2e+11, 2e+11), cex.axis=0.7, main="Correlation between Population and GDP GrowthRate", xlab="Population", ylab="GDP Growth, 2011 to 2012")
test <- merged_country_data$Area/merged_country_data$Population
test
min(test)
min(test, rm.na=TRUE)
min(na.omit(test))
max(na.omit(test))
plot(merged_country_data$Government, merged_country_data$gdp_growth,  las=2, ylim=c(-2e+11, 1.5e+11), cex.axis=0.7, main="Linkage between Govenment Type and GDP Growth", ylab="GDP Growth, Billions", xlab="Government Type", cex.axis=0.7)
plot(merged_country_data$Government, merged_country_data$gdp_growth,  las=2, ylim=c(-2e+11, 1.5e+11), cex.axis=0.7, main="Linkage between Govenment Type and GDP Growth, 2011 - 2012", ylab="GDP Growth, Billions", xlab="Government Type", cex.axis=0.7)
plot(merged_country_data$Government, merged_country_data$gdp_growth,  las=2, ylim=c(-2e+11, 1.5e+11), cex.axis=0.7, main="Linkage between Govenment Type and GDP Growth, 2011 - 2012", ylab="GDP Growth, Billions", xlab="Government Type", cex.axis=0.5)
plot(merged_country_data$Government, merged_country_data$gdp_growth,  las=2, ylim=c(-2e+11, 1.5e+11), cex.axis=0.7, main="Linkage between Govenment Type and GDP Growth, 2011 - 2012", ylab="GDP Growth, Billions", xlab="Government Type", cex.axis=0.4)
plot(merged_country_data$Government, merged_country_data$gdp_growth,  las=2, ylim=c(-2e+11, 1.5e+11), cex.axis=0.7, main="Linkage between Govenment Type and GDP Growth, 2011 - 2012", ylab="GDP Growth, Billions", xlab="Government Type", cex.axis=0.2)
plot(merged_country_data$Government, merged_country_data$gdp_growth,  las=2, ylim=c(-2e+11, 1.5e+11), cex.axis=0.7, main="Linkage between Govenment Type and GDP Growth, 2011 - 2012", ylab="GDP Growth, Billions", xlab="Government Type", cex.axis=0.2)
plot(merged_country_data$Government, merged_country_data$gdp_growth,  las=2, ylim=c(-2e+11, 1.5e+11), cex.axis=0.7, main="Linkage between Govenment Type and GDP Growth, 2011 - 2012", ylab="GDP Growth, Billions", xlab="Government Type", cex.axis=0.1)
plot(merged_country_data$Government, merged_country_data$gdp_growth,  las=2, ylim=c(-2e+11, 1.5e+11), cex.axis=0.7, main="Linkage between Govenment Type and GDP Growth, 2011 - 2012", ylab="GDP Growth, Billions, 2011 - 2012", xlab="Government Type", cex.axis=0.1)
plot_data <- merged_country_data[merged_country_data$high_growth==TRUE,]
plot_data
?runif
?abline
mean(5, 29, 34, 44, 45,  63, 68, 74, 74, 81, 88, 91, 97, 98,113, 118, 151, 158)
x <- c(5, 29, 34, 44, 45,  63, 68, 74, 74, 81, 88, 91, 97, 98,113, 118, 151, 158)
x
mean(x)
mad(x)
mad(x)
mad(x) * 2
?removeSpecial
?pnorm
testVector <- c (10, 14, 22, 45, 90, 100, 72, 45, 56, 32, 84, 49)
testVector
length(testVector)
mean(testVector)
sd(testVector)
?sd
pnorm(testVector)
?pnorm
x <- rnorm(1000)
## cut into quartiles
quartiles <- quantcut( x )
table(quartiles)
?quantcut
pnorm(1.53)
1 - pnorm(1.53)
test <- rnorm(100, 50, 10)
test
?ifelse
sd  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=NULL) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
p.value = pnorm(z.value)
ifelse(two.tailed == TRUE, p.value = 2 * p.value, NA)
return p.value
}
sd  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=NULL) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
p.value = pnorm(z.value)
ifelse(two.tailed == TRUE, p.value = 2 * p.value, NA)
return (p.value)
}
result = sd(test, 40, 5, TRUE)
sd  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=NULL) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
p.value = pnorm(z.value)
p.value = ifelse(two.tailed == TRUE, p.value = 2 * p.value, NA)
return (p.value)
}
result = sd(test, 40, 5, TRUE)
sd  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=NULL) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
p.value = pnorm(z.value)
if(two.tailed == TRUE)
p.value = 2 * p.value
return (p.value)
}
result = sd(test, 40, 5, TRUE)
result
z = (40 - 50)/(5/sqrt(length(test)))
z
length(test)
?pnorm
sd  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=NULL) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
p.value = pnorm(z.value)
if (left.tail == TRUE)
p.value = 1 - p.value
elseif(two.tailed == TRUE)
p.value = 2 * p.value
return (p.value)
}
?message
sd  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=NULL) {
if (two.tailed == TRUE) {
if(left.tail == TRUE) {
message("Function sd: Tail conflict, forcing left.tail to be FALSE")
left.tail = FALSE
}
}
if (two.tailed == FALSE) {
if (left.tail == FALSE) {
message("Function sd: Tail conflict, forcing left.tail to be TRUE")
left.tailed = TRUE
}
}
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
p.value = pnorm(z.value)
if (left.tail == TRUE)
p.value = 1 - p.value
elseif(two.tailed == TRUE)
p.value = 2 * p.value
return (p.value)
}
result = sd(test, 40, 5, TRUE)
test <- c(26, 33, 65, 28, 34, 55, 25, 44, 50, 36, 26, 37, 43, 62, 35, 38, 45, 32, 28, 34)
mean(test)
sd(test)
sd(test)
test
mean(test)
ls()
rm(list=ls())
pvalueCalulator  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=NULL) {
if (two.tailed == TRUE) {
if(left.tail == TRUE) {
message("Function sd: Tail conflict, forcing left.tail to be FALSE")
left.tail = FALSE
}
}
if (two.tailed == FALSE) {
if (left.tail == FALSE) {
message("Function sd: Tail conflict, forcing left.tail to be TRUE")
left.tailed = TRUE
}
}
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
p.value = pnorm(z.value)
if (left.tail == TRUE)
p.value = 1 - p.value
elseif(two.tailed == TRUE)
p.value = 2 * p.value
return (p.value)
}
ls()
test <- c(26, 33, 65, 28, 34, 55, 25, 44, 50, 36, 26, 37, 43, 62, 35, 38, 45, 32, 28, 34)
mean(test)
sd(test)
sqrt(129)
?sd
data1 <- test-mean
test-mean
?sapply
var(test)
length(test)
var(test)*19/20
?rnorm
rnorm(100)
rnorm(130, 98.249, 0.733)
?shapiro.test
shapiro.test(rnorm(n.obs))$p.value
shapiro.test(rnorm(100))$p.value
shapiro.test(rnorm(100))$p.value
type.one.error <- replicate(1000, shapiro.test(rnorm(100))$p.value)<alpha
type.one.error <- replicate(1000, shapiro.test(rnorm(100))$p.value)< 0.05
type.one.error
type.one.error <- replicate(1000, rnorm(100))< 0.05
type.one.error
type.one.error <- replicate(1000, shapiro.test(rnorm(100))$p.value)<0.05
hist(type.one.error)
?hist
?shapiro.test
?qnorm
?switch
pvalueCalulator  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=NULL) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
rejectNULL = FALSE
if (two.tailed == FALSE) {
if (left.tail == TRUE) {
p.value = pnorm(-z.value)
if (p.value  < 0.05)
rejectNULL = TRUE
} else {
p.value = pnorm(z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
} else {
p.value = pnorm(z.value) - pnorm(-z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
list (p.value, rejectNULL)
}
test <- rnorm(130, 98.249, 0.733)
test
result = pvalueCalulator(test, 98.249, 0.733)
result
result = pvalueCalulator(test, 98.249, 0.733, two.tailed=FALSE)
pvalueCalulator  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=NULL) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
rejectNULL = FALSE
print(left.tail)
if (two.tailed == FALSE) {
if (left.tail == TRUE) {
p.value = pnorm(-z.value)
if (p.value  < 0.05)
rejectNULL = TRUE
} else {
p.value = pnorm(z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
} else {
p.value = pnorm(z.value) - pnorm(-z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
list (p.value, rejectNULL)
}
result = pvalueCalulator(test, 98.249, 0.733, two.tailed=FALSE)
xLims <- c(round(min(test)), round(max(test)))
xLis
xLims
test
min(test)
max(test)
xLims <- c(round(min(test)) - 0.5, round(max(test)) + 0.5)
xLims
modelChecker  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
rejectNULL = FALSE
print(left.tail)
if (two.tailed == FALSE) {
if (left.tail == TRUE) {
p.value = pnorm(-z.value)
if (p.value  < 0.05)
rejectNULL = TRUE
} else {
p.value = pnorm(z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
} else {
p.value = pnorm(z.value) - pnorm(-z.value)
if ((pnorm(z.value)  >= 0.95) | pnorm(z.value) <= 0.05)
rejectNULL = TRUE
}
list (p.value, rejectNULL)
}
test
result = pvalueCalulator(test, 98.249, 0.733, two.tailed=FALSE)
modelChecker  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
rejectNULL = FALSE
print(left.tail)
if (two.tailed == FALSE) {
if (left.tail == TRUE) {
p.value = pnorm(-z.value)
if (p.value  < 0.05)
rejectNULL = TRUE
} else {
p.value = pnorm(z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
} else {
p.value = pnorm(z.value) - pnorm(-z.value)
if ((pnorm(z.value)  >= 0.95) | pnorm(z.value) <= 0.05)
rejectNULL = TRUE
}
list (p.value, rejectNULL)
}
result = pvalueCalulator(test, 98.249, 0.733, two.tailed=FALSE)
result = modelChecker(test, 98.249, 0.733, two.tailed=FALSE)
result
mean(test)
sd(test)
pnorm(3)
pnorm(-3)
pnorm(3) + pnorm(-3)
pnorm(3) - pnorm(-3)
pnorm(3) - pnorm(-3) + 0.026
pnorm(3) - pnorm(-3) + 0.001349898 * 2
test <- rnorm(130, 98.249, 0.733)
test <- rnorm(130, 98.249, 0.733)
test
?rnorm
multipleSampleTesting <- function (iterations,pop.mean, pop.sd) {
asample = rnorm(1000, pop.mean, pop.sd)
pval = modelChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE)
}
multipleResults <- multipleSampleTesting(1000, 98.249, 0.733)
type1.error <- replicate(1000, multipleSampleTesting(1000, 98.249, 0.733)
)
length(type1.error)
modelChecker  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
rejectNULL = FALSE
if (two.tailed == FALSE) {
if (left.tail == TRUE) {
p.value = pnorm(-z.value)
if (p.value  <= 0.05)
rejectNULL = TRUE
} else {
p.value = pnorm(z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
} else {
p.value = pnorm(z.value) - pnorm(-z.value)
if ((pnorm(z.value)  >= 0.95) | (pnorm(z.value) <= 0.05))
rejectNULL = TRUE
}
list (p.value, rejectNULL)
}
multipleSampleTesting <- function (iterations,pop.mean, pop.sd) {
asample = rnorm(1000, pop.mean, pop.sd)
pval = modelChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE)$p.value
}
type1.error <- replicate(1000, multipleSampleTesting(1000, 98.249, 0.733))
length(type1.error)
type1.error
type1.error <- replicate(1, multipleSampleTesting(1000, 98.249, 0.733))
type1.error
pop.mean = 98.249
pop.sd = 0.733
asample = rnorm(1000, pop.mean, pop.sd)
asample
modelChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE)
junk <- modelChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE)
junk
junk$p.value
modelChecker  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
rejectNULL = FALSE
if (two.tailed == FALSE) {
if (left.tail == TRUE) {
p.value = pnorm(-z.value)
if (p.value  <= 0.05)
rejectNULL = TRUE
} else {
p.value = pnorm(z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
} else {
p.value = pnorm(z.value) - pnorm(-z.value)
if ((pnorm(z.value)  >= 0.95) | (pnorm(z.value) <= 0.05))
rejectNULL = TRUE
}
list (p.value = p.value, rejectNULL = rejectNULL)
}
modelChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE)
junk <- modelChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE)
junk
junk$p.value
multipleSampleTesting <- function (iterations,pop.mean, pop.sd) {
asample = rnorm(1000, pop.mean, pop.sd)
pval = modelChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE)$p.value
}
type1.error <- replicate(1, multipleSampleTesting(1000, 98.249, 0.733))
type1.error
type1.error <- replicate(1000, multipleSampleTesting(1000, 98.249, 0.733))
type1.error
thresholdCheck <- type1.error < 0.05
thresholdCheck
thresholdCheck <- type1.error > 0.95
thresholdCheck
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
modelChecker  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
rejectNULL = FALSE
if (two.tailed == FALSE) {
if (left.tail == TRUE) {
p.value = pnorm(-z.value)
if (p.value  <= 0.05)
rejectNULL = TRUE
} else {
p.value = pnorm(z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
} else {
p.value = pnorm(z.value) - pnorm(-z.value)
if ((pnorm(z.value)  >= 0.95) | (pnorm(-z.value) <= 0.05))
rejectNULL = TRUE
}
list (p.value = p.value, rejectNULL = rejectNULL)
}
type1.error <- replicate(1, multipleSampleTesting(1000, 98.249, 0.733))
thresholdCheck <- type1.error > 0.95
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
length(thresholdCheck[thresholdCheck==TRUE])type1.error <- replicate(100000, multipleSampleTesting(1000, 98.249, 0.733))
type1.error <- replicate(100000, multipleSampleTesting(1000, 98.249, 0.733))
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
modelChecker  <- function(data, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE) {
sample.mean = mean(data)
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(data)))
rejectNULL = FALSE
if (two.tailed == FALSE) {
if (left.tail == TRUE) {
p.value = pnorm(-z.value)
if (p.value  <= 0.05)
rejectNULL = TRUE
} else {
p.value = pnorm(z.value)
if (p.value  >= 0.95)
rejectNULL = TRUE
}
} else {
p.value = pnorm(z.value) - pnorm(-z.value)
if ((pnorm(z.value)  >= 0.95) | (pnorm(-z.value) <= 0.05))
rejectNULL = TRUE
}
list (p.value = p.value, rejectNULL = rejectNULL)
}
multipleSampleTesting <- function (iterations,pop.mean, pop.sd) {
asample = rnorm(1000, pop.mean, pop.sd)
pval = modelChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, left.tail=FALSE)$p.value
}
type1.error <- replicate(100000, multipleSampleTesting(1000, 98.249, 0.733))
thresholdCheck <- type1.error > 0.95
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
97571 + 2429
?hist
hist(type1.error)
type1.error
head(type1.error)
thresholdCheck <- type1.error < 0.05
thresholdCheck
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
multipleSampleTesting <- function (iterations,pop.mean, pop.sd) {
asample = rnorm(1000, pop.mean, pop.sd)
pval = modelChecker(asample, pop.mean, pop.sd, two.tailed=FALSE, left.tail=FALSE)$p.value
}
type1.error <- replicate(100000, multipleSampleTesting(1000, 98.249, 0.733))
thresholdCheck <- type1.error < 0.05
multipleSampleTesting <- function (iterations,pop.mean, pop.sd) {
asample = rnorm(1000, pop.mean, pop.sd)
pval = modelChecker(asample, pop.mean, pop.sd, two.tailed=FALSE, left.tail=FALSE)$p.value
}
type1.error <- replicate(100000, multipleSampleTesting(1000, 98.249, 0.733))
thresholdCheck <- type1.error > 0.95
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
thresholdCheck <- type1.error >= 0.95
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
percent.rejected = sum(typ1.error < 0.05) /1000
percent.rejected = sum(type1.error < 0.05) /1000
percent.rejected = sum(type1.error > 0.95) /1000
percent.rejected = sum(type1.error < 0.05) /1000
percent.rejected = sum(type1.error <= 0.05) /1000
percent.rejected = sum(type1.error >= 0.95) /1000
hist(type1.error)
crit <- qnorm(1-0.05, 98.249, 0.733)
crit
pow <- pnorm(crit, 98.3223, 0.733)
pow
1 - pow
pnorm(1.64)
pnorm(1.645)
pnorm(1.6443
)
pnorm(1.6447)
pnorm(1.6449)
pnorm(1.64485)
pnorm(1.64486)
pnorm(1.54486)
1 -
1 - 0.9388099
1 - 0.9388099
?pnorm
type2.error <- replicate(10, multipleSampleTesting(1000, 98.3223, 0.733))
type2.error
thresholdCheck <- type2.error > 0.95
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
type2.error <- replicate(100, multipleSampleTesting(1000, 98.3223, 0.733))
thresholdCheck <- type2.error > 0.95
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
type2.error <- replicate(1000, multipleSampleTesting(1000, 98.3223, 0.733))
thresholdCheck <- type2.error > 0.95
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
type2.error <- replicate(10000, multipleSampleTesting(1000, 98.3223, 0.733))
thresholdCheck <- type2.error > 0.95
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
type2.error <- replicate(100000, multipleSampleTesting(1000, 98.3223, 0.733))
thresholdCheck <- type2.error > 0.95
length(thresholdCheck[thresholdCheck==FALSE])
length(thresholdCheck[thresholdCheck==TRUE])
