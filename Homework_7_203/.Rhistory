list (p.value = p.value, rejectNULL = rejectNULL)
}
# Generate a random sample to test the hChecker function
## Choose a sample size of 130, generate a random sample, using the population mean and SD
## Test both hyptheses that are actually correct and actually incorrect
## Use body temperature measurements of a 1000 people, Use a mean of 98.249 and a standard deviation of 0.733
testPopMean <- 98.249
testPopSD <- 0.733
popSampleSize <- 10000
testSampleSize <- 1000
#Create a population of temperatire data
popData <- rnorm(popSampleSize, testPopMean, testPopSD)
# Perform 4 classes of tests by SKEWING The mean in the samples using random constants
#testData <- rnorm(testSampleSize, testPopMean - 1, testPopSD)
testData <- sample(popData, size = testSampleSize, replace = TRUE)
test1Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=TRUE, lower.tail=TRUE)
testData <- rnorm(testSampleSize, testPopMean + 0.01, testPopSD)
test2Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=TRUE, lower.tail=FALSE)
testData <- rnorm(testSampleSize, testPopMean - 0.05, testPopSD)
test3Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=FALSE, lower.tail=TRUE)
testData <- rnorm(testSampleSize, testPopMean + 0.04, testPopSD)
test4Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=FALSE, lower.tail=FALSE)
## FUNCTION : multipleSampleTesting()
## INPUT: Takes a sample size (default 1000) and population metrics and repeatedly calls hChecker()
## RETURNS: pvalue that is sent by hChecker()
multipleSampleTesting <- function (sampleSize = testSampleSize, pop.mean = testPopMean, pop.sd = testPopSD) {
## Generate a random normal sample
#asample = rnorm(sampleSize, pop.mean, pop.sd)
asample <- sample(popData, size = testSampleSize, replace = TRUE)
## Check the support for the likelihood of the Null hypothesis
## Limit checking to two tailed tests
pval = hChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, lower.tail=FALSE)$p.value
}
# Use replicate() to generate multiple samples with the same population variables and do a
# hypothesis testing on each sample of size 1000.
type1.error <- replicate(10000, multipleSampleTesting(testSampleSize, testPopMean, testPopSD))
## Deteremine the number of samples where Null hypothesis is likely and number where Null hypothesis is unliklely
## by using a significance level of 0.05 on both tails
significanceCheckFail <- type1.error >= 0.975 | type1.error <= 0.025
## Compute the percentage of the number of samples that reject the Null hypothesis
percent.rejected = (length(significanceCheckFail[significanceCheckFail==TRUE])/length(significanceCheckFail[significanceCheckFail==FALSE]))*100
rm(list=ls())
## two.tailed    |   left.tail     |   Action
## ------------- | -------------   |   -------------
## TRUE          | TRUE            |   Ignore left.tail setting
## TRUE          | FALSE           |   Ignore left.tail setting
## FALSE         | TRUE            |   take left.tail setting
## FALSE         | FALSE           |   go with right tail
## Cell 3        | Cell 4
## FUNCTION : hchecker()
## ASSUMPTIONS : Significance level is 0.05
## INPUT: Takes a sample and population metrics and does hypothesis checking
## RETURNS: pvalue and a accept/reject flag for the Null hypothesis
hChecker  <- function(sample, pop.mean, pop.sd, two.tailed=TRUE, lower.tail=FALSE) {
## Compute the mean of this sample
sample.mean = mean(sample)
## Use the standard formula to compute Z value
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(sample)))
## SEe the reject Null hypothesis falg to false, update later in the computation
rejectNULL = FALSE
## Start with checking whether two tailed test flag is FALSE. If so, process
## either for lower tail or upper tail
if (two.tailed == FALSE) {
if (lower.tail == FALSE) {
## do the Upper tail test because lower.tail is false
p.value = pnorm(z.value, lower.tail=FALSE)
} else {
## do the Lower tail test because lower.tail is either set to true or is default true
p.value = pnorm(z.value)
}
## Based upon the 0.05 significance level, update the rejectNull flag
## If below 0.05 or above 0.95, we can reject the NULL hypothesis
if ((p.value  >= 0.95) | (p.value <= 0.05))
rejectNULL = TRUE
} else {
## path where two tailed test flag is TRUE
## DO NOT MULTIPLY p.value by 2 for this 2 tailed test because we are not
## working off a lower tail metric baseline
p.value = pnorm(z.value, lower.tail=FALSE)
## Based upon the 0.05 significance level, update the rejectNULL flag
## if p.value is below 0.05 or above 0.95, the NULL hypothesis is rejected
if ((p.value  >= 0.95) | (p.value <= 0.05))
rejectNULL = TRUE
}
## return a list with p.vale and the associated flag
list (p.value = p.value, rejectNULL = rejectNULL)
}
# Generate a random sample to test the hChecker function
## Choose a sample size of 130, generate a random sample, using the population mean and SD
## Test both hyptheses that are actually correct and actually incorrect
## Use body temperature measurements of a 1000 people, Use a mean of 98.249 and a standard deviation of 0.733
testPopMean <- 98.249
testPopSD <- 0.733
popSampleSize <- 10000
testSampleSize <- 1000
#Create a population of temperatire data
popData <- rnorm(popSampleSize, testPopMean, testPopSD)
# Perform 4 classes of tests by SKEWING The mean in the samples using random constants
#testData <- rnorm(testSampleSize, testPopMean - 1, testPopSD)
testData <- sample(popData, size = testSampleSize, replace = TRUE)
test1Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=TRUE, lower.tail=TRUE)
testData <- rnorm(testSampleSize, testPopMean + 0.01, testPopSD)
test2Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=TRUE, lower.tail=FALSE)
testData <- rnorm(testSampleSize, testPopMean - 0.05, testPopSD)
test3Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=FALSE, lower.tail=TRUE)
testData <- rnorm(testSampleSize, testPopMean + 0.04, testPopSD)
test4Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=FALSE, lower.tail=FALSE)
## FUNCTION : multipleSampleTesting()
## INPUT: Takes a sample size (default 1000) and population metrics and repeatedly calls hChecker()
## RETURNS: pvalue that is sent by hChecker()
multipleSampleTesting <- function (sampleSize = testSampleSize, pop.mean = testPopMean, pop.sd = testPopSD) {
## Generate a random normal sample
#asample = rnorm(sampleSize, pop.mean, pop.sd)
asample <- sample(popData, size = testSampleSize, replace = TRUE)
## Check the support for the likelihood of the Null hypothesis
## Limit checking to two tailed tests
pval = hChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, lower.tail=FALSE)$p.value
}
# Use replicate() to generate multiple samples with the same population variables and do a
# hypothesis testing on each sample of size 1000.
type1.error <- replicate(100000, multipleSampleTesting(testSampleSize, testPopMean, testPopSD))
## Deteremine the number of samples where Null hypothesis is likely and number where Null hypothesis is unliklely
## by using a significance level of 0.05 on both tails
significanceCheckFail <- type1.error >= 0.975 | type1.error <= 0.025
## Compute the percentage of the number of samples that reject the Null hypothesis
percent.rejected = (length(significanceCheckFail[significanceCheckFail==TRUE])/length(significanceCheckFail[significanceCheckFail==FALSE]))*100
crit <- qnorm(1-0.05, popMean, popSD)
crit
popMean = 98.249
popSD = 0.733
sampleSize = 1000
observedMean = 98.3223
crit <- qnorm(1-0.05, popMean, popSD)
crit
pow <- pnorm(crit, popMean, popSD)
pow
# Statistical Power  is 1 - pow
1 - pow
rm(list=ls())
## two.tailed    |   left.tail     |   Action
## ------------- | -------------   |   -------------
## TRUE          | TRUE            |   Ignore left.tail setting
## TRUE          | FALSE           |   Ignore left.tail setting
## FALSE         | TRUE            |   take left.tail setting
## FALSE         | FALSE           |   go with right tail
## Cell 3        | Cell 4
## FUNCTION : hchecker() - Check for accepting/rejecting the Null hypothesis
## ASSUMPTIONS : Significance level is 0.05
## INPUT: Takes a sample and population metrics and does hypothesis checking
## RETURNS: pvalue and a accept/reject flag for the Null hypothesis
hChecker  <- function(sample, pop.mean, pop.sd, two.tailed=TRUE, lower.tail=FALSE) {
## Compute the mean of this sample
sample.mean = mean(sample)
## Use the standard formula to compute Z value
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(sample)))
## SEe the reject Null hypothesis falg to false, update later in the computation
rejectNULL = FALSE
## Start with checking whether two tailed test flag is FALSE. If so, process
## either for lower tail or upper tail
if (two.tailed == FALSE) {
if (lower.tail == FALSE) {
## do the Upper tail test because lower.tail flag is FALSE
p.value = pnorm(z.value, lower.tail=FALSE)
} else {
## do the Lower tail test because lower.tail is either set to true or is default true
p.value = pnorm(z.value)
}
## Based upon the 0.05 significance level, update the rejectNull flag
## If equal to or below 0.05 or eqalu to or above 0.95, we can reject the NULL hypothesis
if ((p.value  >= 0.95) | (p.value <= 0.05))
rejectNULL = TRUE
} else {
## path where two tailed test flag is TRUE
## DO NOT MULTIPLY p.value by 2 for this 2 tailed test because we are not
## working off a lower tail metric baseline
p.value = pnorm(z.value, lower.tail=FALSE)
## Based upon the 0.05 significance level, update the rejectNULL flag
## if p.value is below 0.05 or above 0.95, the NULL hypothesis is rejected
if ((p.value  >= 0.95) | (p.value <= 0.05))
rejectNULL = TRUE
}
## return a list with p.vale and the associated flag
list (p.value = p.value, rejectNULL = rejectNULL)
}
# Generate a random sample to test the hChecker function
## Choose a sample size of 130, generate a random sample, using the population mean and SD
## Test both hyptheses that are actually correct and actually incorrect
## Use body temperature measurements of a 1000 people, Use a mean of 98.249 and a standard deviation of 0.733
testPopMean <- 98.249
testPopSD <- 0.733
popSampleSize <- 10000
testSampleSize <- 1000
#Create a population of temperatire data
popData <- rnorm(popSampleSize, testPopMean, testPopSD)
# Perform 4 classes of tests by SKEWING The mean in the samples using random constants
#testData <- rnorm(testSampleSize, testPopMean - 1, testPopSD)
testData <- sample(popData, size = testSampleSize, replace = TRUE)
test1Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=TRUE, lower.tail=TRUE)
testData <- rnorm(testSampleSize, testPopMean + 0.01, testPopSD)
test2Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=TRUE, lower.tail=FALSE)
testData <- rnorm(testSampleSize, testPopMean - 0.05, testPopSD)
test3Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=FALSE, lower.tail=TRUE)
testData <- rnorm(testSampleSize, testPopMean + 0.04, testPopSD)
test4Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=FALSE, lower.tail=FALSE)
## FUNCTION : multipleSampleTesting() - Test multiple samples from the same population, through random sampling
## INPUT: Takes a sample size (default 1000) and population metrics and repeatedly calls hChecker()
## RETURNS: pvalue that is sent by hChecker()
multipleSampleTesting <- function (sampleSize = testSampleSize, pop.mean = testPopMean, pop.sd = testPopSD) {
## Generate a random normal sample
#asample = rnorm(sampleSize, pop.mean, pop.sd)
asample <- sample(popData, size = testSampleSize, replace = TRUE)
## Check the support for the likelihood of the Null hypothesis
## Limit checking to two tailed tests
pval = hChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, lower.tail=FALSE)$p.value
}
# Use replicate() to generate multiple samples with the same population variables and do a
# hypothesis testing on each sample of size 1000.
type1.error <- replicate(100000, multipleSampleTesting(testSampleSize, testPopMean, testPopSD))
## Deteremine the number of samples where Null hypothesis is likely and number where Null hypothesis is unliklely
## by using a significance level of 0.025 on both tails, 0.05 total
significanceCheckFail <- type1.error >= 0.95 | type1.error <= 0.05
## Compute the percentage of the number of samples that reject the Null hypothesis
percent.rejected = (length(significanceCheckFail[significanceCheckFail==TRUE])/length(significanceCheckFail[significanceCheckFail==FALSE]))*100
percent.rejected
## two.tailed    |   left.tail     |   Action
## ------------- | -------------   |   -------------
## TRUE          | TRUE            |   Ignore left.tail setting
## TRUE          | FALSE           |   Ignore left.tail setting
## FALSE         | TRUE            |   take left.tail setting
## FALSE         | FALSE           |   go with right tail
## Cell 3        | Cell 4
## FUNCTION : hchecker() - Check for accepting/rejecting the Null hypothesis
## ASSUMPTIONS : Significance level is 0.05
## INPUT: Takes a sample and population metrics and does hypothesis checking
## RETURNS: pvalue and a accept/reject flag for the Null hypothesis
hChecker  <- function(sample, pop.mean, pop.sd, two.tailed=TRUE, lower.tail=FALSE) {
## Compute the mean of this sample
sample.mean = mean(sample)
## Use the standard formula to compute Z value
z.value = (sample.mean - pop.mean)/(pop.sd/sqrt(length(sample)))
## SEe the reject Null hypothesis falg to false, update later in the computation
rejectNULL = FALSE
## Start with checking whether two tailed test flag is FALSE. If so, process
## either for lower tail or upper tail
if (two.tailed == FALSE) {
if (lower.tail == FALSE) {
## do the Upper tail test because lower.tail flag is FALSE
p.value = pnorm(z.value, lower.tail=FALSE)
} else {
## do the Lower tail test because lower.tail is either set to true or is default true
p.value = pnorm(z.value)
}
## Based upon the 0.05 significance level, update the rejectNull flag
## If equal to or below 0.05 or eqalu to or above 0.95, we can reject the NULL hypothesis
if ((p.value  >= 0.95) | (p.value <= 0.05))
rejectNULL = TRUE
} else {
## path where two tailed test flag is TRUE
## DO NOT MULTIPLY p.value by 2 for this 2 tailed test because we are not
## working off a lower tail metric baseline
p.value = pnorm(z.value, lower.tail=FALSE)
## Based upon the 0.05 significance level, update the rejectNULL flag
## if p.value is below 0.05 or above 0.95, the NULL hypothesis is rejected
if ((p.value  >= 0.95) | (p.value <= 0.05))
rejectNULL = TRUE
}
## return a list with p.vale and the associated flag
list (p.value = p.value, rejectNULL = rejectNULL)
}
# Generate a random sample to test the hChecker function
## Choose a sample size of 130, generate a random sample, using the population mean and SD
## Test both hyptheses that are actually correct and actually incorrect
## Use body temperature measurements of a 1000 people, Use a mean of 98.249 and a standard deviation of 0.733
testPopMean <- 98.249
testPopSD <- 0.733
popSampleSize <- 10000
testSampleSize <- 1000
#Create a population of temperatire data
popData <- rnorm(popSampleSize, testPopMean, testPopSD)
# Perform 4 classes of tests by SKEWING The mean in the samples using random constants
#testData <- rnorm(testSampleSize, testPopMean - 1, testPopSD)
testData <- sample(popData, size = testSampleSize, replace = TRUE)
test1Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=TRUE, lower.tail=TRUE)
testData <- rnorm(testSampleSize, testPopMean + 0.01, testPopSD)
test2Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=TRUE, lower.tail=FALSE)
testData <- rnorm(testSampleSize, testPopMean - 0.05, testPopSD)
test3Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=FALSE, lower.tail=TRUE)
testData <- rnorm(testSampleSize, testPopMean + 0.04, testPopSD)
test4Results <- hChecker(testData, testPopMean, testPopSD, two.tailed=FALSE, lower.tail=FALSE)
## FUNCTION : multipleSampleTesting() - Test multiple samples from the same population, through random sampling
## INPUT: Takes a sample size (default 1000) and population metrics and repeatedly calls hChecker()
## RETURNS: pvalue that is sent by hChecker()
multipleSampleTesting <- function (sampleSize = testSampleSize, pop.mean = testPopMean, pop.sd = testPopSD) {
## Generate a random normal sample
#asample = rnorm(sampleSize, pop.mean, pop.sd)
asample <- sample(popData, size = testSampleSize, replace = TRUE)
## Check the support for the likelihood of the Null hypothesis
## Limit checking to two tailed tests
pval = hChecker(asample, pop.mean, pop.sd, two.tailed=TRUE, lower.tail=FALSE)$p.value
}
# Use replicate() to generate multiple samples with the same population variables and do a
# hypothesis testing on each sample of size 1000.
type1.error <- replicate(100000, multipleSampleTesting(testSampleSize, testPopMean, testPopSD))
## Deteremine the number of samples where Null hypothesis is likely and number where Null hypothesis is unliklely
## by using a significance level of 0.025 on both tails, 0.05 total
significanceCheckFail <- type1.error >= 0.975 | type1.error <= 0.025
## Compute the percentage of the number of samples that reject the Null hypothesis
percent.rejected = (length(significanceCheckFail[significanceCheckFail==TRUE])/length(significanceCheckFail[significanceCheckFail==FALSE]))*100
percent.rejected
data <- significanceCheckFail[significanceCheckFail==FALSE]
data
hist(significanceCheckFail[significanceCheckFail==FALSE])
head(type1.error)
data <- significanceCheckFail[significanceCheckFail> 0.95 | significanceCheckFail < 0.05 ]
data
data <- type1.error[(type1.error > 0.95) | (type1.error < 0.05) ]
data
hist(data)
data <- type1.error[(type1.error < 0.95) | (type1.error > 0.05) ]
hist(data)
curveData <- type1.error[type1.error - pop.mean]
curveData <- type1.error[type1.error - testPopMean]
curvedata
curveData
hist(curveData)
head(type1.error)
testPopMean
head(type1.error)
curveData <- type1.error[type1.error - 0.5]
pnorm(-1.96)
library(RODBC)
packages.install("RODBC")
install.packages("RODBC")
library(RODBC)
library(RODBC);channel <- odbcConnect("ODBC_NAME", uid="username", pwd="password");
library("RODBC")
RShowDoc("RODBC", package="RODBC")
install.packages(RODBC)
install.packages("RODBC")
library(ODBC)
install.packages("RODBC")
install.packages("RODBC", type='source')
library("RODBC")
cn <- odbcConnect("https://staging.portal.usetrusted.com")
channel <- odbcConnect("DATABASE", uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL", believeNRows=FALSE)
drv = dbDriver("MySQL")
drv = dbDriver("MySQL")
install.packages("RMySQL")
library(RMySQL)
install.packages("RODBC", type='source')
library("RODBC")
cn <- odbcConnect("https://staging.portal.usetrusted.com")
channel <- odbcConnect("DATABASE", uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL", believeNRows=FALSE)
drv = dbDriver("MySQL")
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL", )
mydb = dbConnect(MySQL(), uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL")
mydb = dbConnect(MySQL(postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap), uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL")
mydb = dbConnect(MySQL("postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap""), uid="lujelbkxszjega", pwd="NOOmGG6w8mWvg9WPI1PWBAh1QL")
?dbConnect
install.packages("RPostgreSQL")
library("RPostgreSQL")
?RPostgreSQL
?RPostgreSQL
??RPostgreSQL
m <- dbDriver("PostgreSQL")
con <- dbConnect(m, user="lujelbkxszjega", password="NOOmGG6w8mWvg9WPI1PWBAh1QL", dbname="postgres://ec2-54-227-254-13.compute-1.amazonaws.com:5432/deqi9hskils0ap")
con
rs <- dbSendQuery(con, "select *")
rs <- dbSendQuery(con, "select * from *")
dbListTables(con)
test <- dbReadTable(con, "booking_preferences", row.names = "Test_Booking_Preferences")
test
nrow(test)
test <- dbReadTable(con, "zip_codes", row.names = "Zip Codes")
test
typeof(test)
test
hist(test$zip_code)
typeof(test$zip_code)
hist(as.numeric(test$zip_code))
?hist
hist(as.numeric(test$zip_code), breaks = 100)
hist(as.numeric(test$zip_code), breaks = 200)
?hist
?axis
hist(as.numeric(test$zip_code), breaks = 200, las = 1)
?hist
?range
?hist
hist(as.numeric(test$zip_code), breaks = 200, las = 1, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences")
hist(as.numeric(test$zip_code), breaks = 200, las = 1, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", srt=90)
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences")
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", axes=FALSE)
minx <- min(as.numeric(test$zip_code))
maxx <- max(as.numeric(test$zip_code))
axis(1, at = seq(minx, maxx, by = 1))
axis(1, at = seq(minx, maxx, by = 1), las=2)
axis(1, at = seq(minx, maxx, by = 10), las=2)
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", axes=FALSE)
axis(1, at = seq(minx, maxx, by = 10), las=2)
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", axes=FALSE, border="blue",
col="green",)
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green",)
?las
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim(minx, maxx))
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
?axis
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx), padj)
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx), padj = 1)
?axis
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
axis(padj)
axis(padj = 2)
axis(1, padj = 2)
axis(1, padj = 1
)
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
axis(1, padj = 1)
axis(1, padj = 2)
axis(1, padj = 3)
?axis
?breaks
axis(side = 1, at = seq(minx, maxx, by = 1))
axis(side = 1, at = seq(minx, maxx, by = 1), las=2)
hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
axis(side = 1, at = seq(minx, maxx, by = 1), las=2)
jk <- hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
axis(side=1,at=jk$mids,labels=seq(minx, maxx))
jk <- hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx), freq=TRUE)
jk <- hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
?mtext
jk <- hist(as.numeric(test$zip_code > 0), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
jk <- hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
jk
jk <- hist(as.numeric(test$zip_code > 0), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
jk <- jk[jk$count > 0]
jk
jk
jk <- hist(as.numeric(test$zip_code > 0), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
jk
jk <- hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
jk
jk <- jk[jk$counts > 0]
jk
jk
jk <- hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
jk
jkUpdate <- c(jk$breaks, jk$counts)
jkUpdate
jkUpdate2$breaks <-jk$breaks
jkUpdate2 <- data.frame()
jkUpdate2$breaks <-jk$breaks
jkUpdate <- subset(jk, select= c("breaks", "Counts))
jkUpdate <- subset(jk, select= c("breaks", "Counts"))
jk
typeof(jk)
jk
jk1 <- data.frame(jk$breaks)
jk1
jk1$counts <- data.frame(jk$counts)
jk2 <- data.frame(jk$counts)
jk3 <- cbind(jk1, jk2)
?cbind
?data.frame
jk2 <- data.frame(jk$counts. col.name = "Counts")
jk2 <- data.frame(jk$counts. col.names = "Counts")
jk1 <- data.frame(jk$breaks)
head jk1
head(jk1)
jk2 <- data.frame(jk$counts)
head(jk2)
jk <- cbind(jk1,jk2)
nrow(jk1)
nrow(jk2)
jk
jk <- hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx))
hj <- jk[jk$counts != 0]
hj
test
library(plyr)
ddply(temp, .(zip_code), summarize, edge = sum(edge))
ddply(test, .(zip_code), summarize, edge = sum(edge))
head(temp)
test
head(test)
hist(test$zip_code)
jk <- hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx), labels = TRUE)
?hist
jk <- hist(as.numeric(test$zip_code), breaks = 200, las = 2, main = "Plot of Trusted Zip Codes", xlab = "Zip Codes", ylab="Number of occurrences", border="blue",
col="green", xlim= c(minx, maxx), labels = test$zip_code)
?labels
